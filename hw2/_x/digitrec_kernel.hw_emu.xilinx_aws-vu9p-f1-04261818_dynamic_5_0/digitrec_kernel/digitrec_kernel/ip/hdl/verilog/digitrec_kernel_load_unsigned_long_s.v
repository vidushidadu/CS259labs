// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2_AR71275_op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module digitrec_kernel_load_unsigned_long_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_data_dram_AWVALID,
        m_axi_data_dram_AWREADY,
        m_axi_data_dram_AWADDR,
        m_axi_data_dram_AWID,
        m_axi_data_dram_AWLEN,
        m_axi_data_dram_AWSIZE,
        m_axi_data_dram_AWBURST,
        m_axi_data_dram_AWLOCK,
        m_axi_data_dram_AWCACHE,
        m_axi_data_dram_AWPROT,
        m_axi_data_dram_AWQOS,
        m_axi_data_dram_AWREGION,
        m_axi_data_dram_AWUSER,
        m_axi_data_dram_WVALID,
        m_axi_data_dram_WREADY,
        m_axi_data_dram_WDATA,
        m_axi_data_dram_WSTRB,
        m_axi_data_dram_WLAST,
        m_axi_data_dram_WID,
        m_axi_data_dram_WUSER,
        m_axi_data_dram_ARVALID,
        m_axi_data_dram_ARREADY,
        m_axi_data_dram_ARADDR,
        m_axi_data_dram_ARID,
        m_axi_data_dram_ARLEN,
        m_axi_data_dram_ARSIZE,
        m_axi_data_dram_ARBURST,
        m_axi_data_dram_ARLOCK,
        m_axi_data_dram_ARCACHE,
        m_axi_data_dram_ARPROT,
        m_axi_data_dram_ARQOS,
        m_axi_data_dram_ARREGION,
        m_axi_data_dram_ARUSER,
        m_axi_data_dram_RVALID,
        m_axi_data_dram_RREADY,
        m_axi_data_dram_RDATA,
        m_axi_data_dram_RLAST,
        m_axi_data_dram_RID,
        m_axi_data_dram_RUSER,
        m_axi_data_dram_RRESP,
        m_axi_data_dram_BVALID,
        m_axi_data_dram_BREADY,
        m_axi_data_dram_BRESP,
        m_axi_data_dram_BID,
        m_axi_data_dram_BUSER,
        data_dram_offset,
        data_dram_offset1,
        data_local_0_address0,
        data_local_0_ce0,
        data_local_0_we0,
        data_local_0_d0,
        data_local_1_address0,
        data_local_1_ce0,
        data_local_1_we0,
        data_local_1_d0,
        data_local_2_address0,
        data_local_2_ce0,
        data_local_2_we0,
        data_local_2_d0,
        data_local_3_address0,
        data_local_3_ce0,
        data_local_3_we0,
        data_local_3_d0,
        data_local_4_address0,
        data_local_4_ce0,
        data_local_4_we0,
        data_local_4_d0,
        data_local_5_address0,
        data_local_5_ce0,
        data_local_5_we0,
        data_local_5_d0,
        data_local_6_address0,
        data_local_6_ce0,
        data_local_6_we0,
        data_local_6_d0,
        data_local_7_address0,
        data_local_7_ce0,
        data_local_7_we0,
        data_local_7_d0,
        num_elem
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_pp0_stage0 = 10'd256;
parameter    ap_ST_fsm_state12 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_data_dram_AWVALID;
input   m_axi_data_dram_AWREADY;
output  [63:0] m_axi_data_dram_AWADDR;
output  [0:0] m_axi_data_dram_AWID;
output  [31:0] m_axi_data_dram_AWLEN;
output  [2:0] m_axi_data_dram_AWSIZE;
output  [1:0] m_axi_data_dram_AWBURST;
output  [1:0] m_axi_data_dram_AWLOCK;
output  [3:0] m_axi_data_dram_AWCACHE;
output  [2:0] m_axi_data_dram_AWPROT;
output  [3:0] m_axi_data_dram_AWQOS;
output  [3:0] m_axi_data_dram_AWREGION;
output  [0:0] m_axi_data_dram_AWUSER;
output   m_axi_data_dram_WVALID;
input   m_axi_data_dram_WREADY;
output  [63:0] m_axi_data_dram_WDATA;
output  [7:0] m_axi_data_dram_WSTRB;
output   m_axi_data_dram_WLAST;
output  [0:0] m_axi_data_dram_WID;
output  [0:0] m_axi_data_dram_WUSER;
output   m_axi_data_dram_ARVALID;
input   m_axi_data_dram_ARREADY;
output  [63:0] m_axi_data_dram_ARADDR;
output  [0:0] m_axi_data_dram_ARID;
output  [31:0] m_axi_data_dram_ARLEN;
output  [2:0] m_axi_data_dram_ARSIZE;
output  [1:0] m_axi_data_dram_ARBURST;
output  [1:0] m_axi_data_dram_ARLOCK;
output  [3:0] m_axi_data_dram_ARCACHE;
output  [2:0] m_axi_data_dram_ARPROT;
output  [3:0] m_axi_data_dram_ARQOS;
output  [3:0] m_axi_data_dram_ARREGION;
output  [0:0] m_axi_data_dram_ARUSER;
input   m_axi_data_dram_RVALID;
output   m_axi_data_dram_RREADY;
input  [63:0] m_axi_data_dram_RDATA;
input   m_axi_data_dram_RLAST;
input  [0:0] m_axi_data_dram_RID;
input  [0:0] m_axi_data_dram_RUSER;
input  [1:0] m_axi_data_dram_RRESP;
input   m_axi_data_dram_BVALID;
output   m_axi_data_dram_BREADY;
input  [1:0] m_axi_data_dram_BRESP;
input  [0:0] m_axi_data_dram_BID;
input  [0:0] m_axi_data_dram_BUSER;
input  [60:0] data_dram_offset;
input  [14:0] data_dram_offset1;
output  [7:0] data_local_0_address0;
output   data_local_0_ce0;
output   data_local_0_we0;
output  [63:0] data_local_0_d0;
output  [7:0] data_local_1_address0;
output   data_local_1_ce0;
output   data_local_1_we0;
output  [63:0] data_local_1_d0;
output  [7:0] data_local_2_address0;
output   data_local_2_ce0;
output   data_local_2_we0;
output  [63:0] data_local_2_d0;
output  [7:0] data_local_3_address0;
output   data_local_3_ce0;
output   data_local_3_we0;
output  [63:0] data_local_3_d0;
output  [7:0] data_local_4_address0;
output   data_local_4_ce0;
output   data_local_4_we0;
output  [63:0] data_local_4_d0;
output  [7:0] data_local_5_address0;
output   data_local_5_ce0;
output   data_local_5_we0;
output  [63:0] data_local_5_d0;
output  [7:0] data_local_6_address0;
output   data_local_6_ce0;
output   data_local_6_we0;
output  [63:0] data_local_6_d0;
output  [7:0] data_local_7_address0;
output   data_local_7_ce0;
output   data_local_7_we0;
output  [63:0] data_local_7_d0;
input  [10:0] num_elem;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_data_dram_ARVALID;
reg m_axi_data_dram_RREADY;
reg data_local_0_ce0;
reg data_local_0_we0;
reg data_local_1_ce0;
reg data_local_1_we0;
reg data_local_2_ce0;
reg data_local_2_we0;
reg data_local_3_ce0;
reg data_local_3_we0;
reg data_local_4_ce0;
reg data_local_4_we0;
reg data_local_5_ce0;
reg data_local_5_we0;
reg data_local_6_ce0;
reg data_local_6_we0;
reg data_local_7_ce0;
reg data_local_7_we0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    data_dram_blk_n_AR;
wire    ap_CS_fsm_state2;
reg    data_dram_blk_n_R;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [10:0] i_reg_225;
wire   [61:0] sum2_fu_244_p2;
reg   [61:0] sum2_reg_301;
reg    ap_sig_ioackin_m_axi_data_dram_ARREADY;
wire   [0:0] exitcond_fu_265_p2;
wire    ap_block_state9_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter1;
wire    ap_block_state11_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
wire   [10:0] i_1_fu_270_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [2:0] tmp_fu_276_p1;
reg   [2:0] tmp_reg_331;
reg   [2:0] tmp_reg_331_pp0_iter1_reg;
reg   [7:0] newIndex_reg_335;
reg   [7:0] newIndex_reg_335_pp0_iter1_reg;
reg   [63:0] data_dram_addr_read_reg_340;
wire    ap_CS_fsm_state8;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state9;
reg    ap_enable_reg_pp0_iter2;
wire   [63:0] newIndex8_fu_290_p1;
wire   [63:0] sum2_cast_fu_250_p1;
reg    ap_reg_ioackin_m_axi_data_dram_ARREADY;
wire   [61:0] data_dram_offset_cast_fu_240_p1;
wire   [61:0] tmp_23_cast_fu_236_p1;
wire    ap_CS_fsm_state12;
reg   [9:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_reg_ioackin_m_axi_data_dram_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state9) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state9)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state9);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_data_dram_ARREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            if ((ap_sig_ioackin_m_axi_data_dram_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_data_dram_ARREADY <= 1'b0;
            end else if ((m_axi_data_dram_ARREADY == 1'b1)) begin
                ap_reg_ioackin_m_axi_data_dram_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_265_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        i_reg_225 <= i_1_fu_270_p2;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        i_reg_225 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_dram_addr_read_reg_340 <= m_axi_data_dram_RDATA;
        newIndex_reg_335_pp0_iter1_reg <= newIndex_reg_335;
        tmp_reg_331_pp0_iter1_reg <= tmp_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_265_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        newIndex_reg_335 <= {{i_reg_225[10:3]}};
        tmp_reg_331 <= tmp_fu_276_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        sum2_reg_301 <= sum2_fu_244_p2;
    end
end

always @ (*) begin
    if ((exitcond_fu_265_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state9 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state9 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((ap_reg_ioackin_m_axi_data_dram_ARREADY == 1'b0)) begin
        ap_sig_ioackin_m_axi_data_dram_ARREADY = m_axi_data_dram_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_data_dram_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_dram_blk_n_AR = m_axi_data_dram_ARREADY;
    end else begin
        data_dram_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        data_dram_blk_n_R = m_axi_data_dram_RVALID;
    end else begin
        data_dram_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_0_ce0 = 1'b1;
    end else begin
        data_local_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_331_pp0_iter1_reg == 3'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_0_we0 = 1'b1;
    end else begin
        data_local_0_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_1_ce0 = 1'b1;
    end else begin
        data_local_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_331_pp0_iter1_reg == 3'd1) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_1_we0 = 1'b1;
    end else begin
        data_local_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_2_ce0 = 1'b1;
    end else begin
        data_local_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_331_pp0_iter1_reg == 3'd2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_2_we0 = 1'b1;
    end else begin
        data_local_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_3_ce0 = 1'b1;
    end else begin
        data_local_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_331_pp0_iter1_reg == 3'd3) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_3_we0 = 1'b1;
    end else begin
        data_local_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_4_ce0 = 1'b1;
    end else begin
        data_local_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_331_pp0_iter1_reg == 3'd4) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_4_we0 = 1'b1;
    end else begin
        data_local_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_5_ce0 = 1'b1;
    end else begin
        data_local_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_331_pp0_iter1_reg == 3'd5) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_5_we0 = 1'b1;
    end else begin
        data_local_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_6_ce0 = 1'b1;
    end else begin
        data_local_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_331_pp0_iter1_reg == 3'd6) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_6_we0 = 1'b1;
    end else begin
        data_local_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_7_ce0 = 1'b1;
    end else begin
        data_local_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_reg_331_pp0_iter1_reg == 3'd7) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data_local_7_we0 = 1'b1;
    end else begin
        data_local_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_reg_ioackin_m_axi_data_dram_ARREADY == 1'b0) & (1'b1 == ap_CS_fsm_state2))) begin
        m_axi_data_dram_ARVALID = 1'b1;
    end else begin
        m_axi_data_dram_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_data_dram_RREADY = 1'b1;
    end else begin
        m_axi_data_dram_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (ap_sig_ioackin_m_axi_data_dram_ARREADY == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_265_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter2 == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (exitcond_fu_265_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_data_dram_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_data_dram_RVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter1 = (m_axi_data_dram_RVALID == 1'b0);
end

assign ap_block_state11_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign data_dram_offset_cast_fu_240_p1 = data_dram_offset;

assign data_local_0_address0 = newIndex8_fu_290_p1;

assign data_local_0_d0 = data_dram_addr_read_reg_340;

assign data_local_1_address0 = newIndex8_fu_290_p1;

assign data_local_1_d0 = data_dram_addr_read_reg_340;

assign data_local_2_address0 = newIndex8_fu_290_p1;

assign data_local_2_d0 = data_dram_addr_read_reg_340;

assign data_local_3_address0 = newIndex8_fu_290_p1;

assign data_local_3_d0 = data_dram_addr_read_reg_340;

assign data_local_4_address0 = newIndex8_fu_290_p1;

assign data_local_4_d0 = data_dram_addr_read_reg_340;

assign data_local_5_address0 = newIndex8_fu_290_p1;

assign data_local_5_d0 = data_dram_addr_read_reg_340;

assign data_local_6_address0 = newIndex8_fu_290_p1;

assign data_local_6_d0 = data_dram_addr_read_reg_340;

assign data_local_7_address0 = newIndex8_fu_290_p1;

assign data_local_7_d0 = data_dram_addr_read_reg_340;

assign exitcond_fu_265_p2 = ((i_reg_225 == num_elem) ? 1'b1 : 1'b0);

assign i_1_fu_270_p2 = (i_reg_225 + 11'd1);

assign m_axi_data_dram_ARADDR = sum2_cast_fu_250_p1;

assign m_axi_data_dram_ARBURST = 2'd0;

assign m_axi_data_dram_ARCACHE = 4'd0;

assign m_axi_data_dram_ARID = 1'd0;

assign m_axi_data_dram_ARLEN = num_elem;

assign m_axi_data_dram_ARLOCK = 2'd0;

assign m_axi_data_dram_ARPROT = 3'd0;

assign m_axi_data_dram_ARQOS = 4'd0;

assign m_axi_data_dram_ARREGION = 4'd0;

assign m_axi_data_dram_ARSIZE = 3'd0;

assign m_axi_data_dram_ARUSER = 1'd0;

assign m_axi_data_dram_AWADDR = 64'd0;

assign m_axi_data_dram_AWBURST = 2'd0;

assign m_axi_data_dram_AWCACHE = 4'd0;

assign m_axi_data_dram_AWID = 1'd0;

assign m_axi_data_dram_AWLEN = 32'd0;

assign m_axi_data_dram_AWLOCK = 2'd0;

assign m_axi_data_dram_AWPROT = 3'd0;

assign m_axi_data_dram_AWQOS = 4'd0;

assign m_axi_data_dram_AWREGION = 4'd0;

assign m_axi_data_dram_AWSIZE = 3'd0;

assign m_axi_data_dram_AWUSER = 1'd0;

assign m_axi_data_dram_AWVALID = 1'b0;

assign m_axi_data_dram_BREADY = 1'b0;

assign m_axi_data_dram_WDATA = 64'd0;

assign m_axi_data_dram_WID = 1'd0;

assign m_axi_data_dram_WLAST = 1'b0;

assign m_axi_data_dram_WSTRB = 8'd0;

assign m_axi_data_dram_WUSER = 1'd0;

assign m_axi_data_dram_WVALID = 1'b0;

assign newIndex8_fu_290_p1 = newIndex_reg_335_pp0_iter1_reg;

assign sum2_cast_fu_250_p1 = sum2_reg_301;

assign sum2_fu_244_p2 = (data_dram_offset_cast_fu_240_p1 + tmp_23_cast_fu_236_p1);

assign tmp_23_cast_fu_236_p1 = data_dram_offset1;

assign tmp_fu_276_p1 = i_reg_225[2:0];

endmodule //digitrec_kernel_load_unsigned_long_s
