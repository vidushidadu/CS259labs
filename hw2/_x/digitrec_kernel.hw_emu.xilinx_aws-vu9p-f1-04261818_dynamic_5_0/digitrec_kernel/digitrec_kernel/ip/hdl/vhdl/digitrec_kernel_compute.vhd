-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2_AR71275_op
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec_kernel_compute is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    test_image : IN STD_LOGIC_VECTOR (63 downto 0);
    train_images_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    train_images_0_ce0 : OUT STD_LOGIC;
    train_images_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    train_images_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    train_images_1_ce0 : OUT STD_LOGIC;
    train_images_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    train_images_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    train_images_2_ce0 : OUT STD_LOGIC;
    train_images_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    train_images_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    train_images_3_ce0 : OUT STD_LOGIC;
    train_images_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    train_images_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    train_images_4_ce0 : OUT STD_LOGIC;
    train_images_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    train_images_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    train_images_5_ce0 : OUT STD_LOGIC;
    train_images_5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    train_images_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    train_images_6_ce0 : OUT STD_LOGIC;
    train_images_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    train_images_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    train_images_7_ce0 : OUT STD_LOGIC;
    train_images_7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    knn_mat_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_4_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_4_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_4_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_4_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_5_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_5_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_5_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_5_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_6_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_6_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_6_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_7_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_7_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
    knn_mat_7_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
    local_num_elements : IN STD_LOGIC_VECTOR (10 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_23 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_24 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_25 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_26 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_27 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_28 : OUT STD_LOGIC_VECTOR (7 downto 0);
    ap_return_29 : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of digitrec_kernel_compute is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv17_1 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv49_1 : STD_LOGIC_VECTOR (48 downto 0) := "0000000000000000000000000000000000000000000000001";
    constant ap_const_lv17_31 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000110001";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal x1_reg_852 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_num_elements_cast1_fu_949_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal local_num_elements_cast1_reg_1517 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast4_fu_981_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast4_reg_1528 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_985_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_reg_1533 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal newIndex5_fu_1000_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex5_reg_1537 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_1554 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_1029_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_1563 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_1040_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_reg_1572 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_1051_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_1581 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_1062_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_1590 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_fu_1073_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_6_reg_1599 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_reg_1608 : STD_LOGIC_VECTOR (0 downto 0);
    signal x1_1_7_fu_1089_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_3_fu_1148_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal bound_fu_1342_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal bound_reg_1633 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_flatten_fu_1183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten_reg_1638 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal indvar_flatten_next_fu_1188_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal indvar_flatten_next_reg_1642 : STD_LOGIC_VECTOR (16 downto 0);
    signal x2_mid2_fu_1199_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal x2_mid2_reg_1647 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_8_cast_mid2_v_fu_1213_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_cast_mid2_v_reg_1652 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_fu_1221_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_33_reg_1658 : STD_LOGIC_VECTOR (2 downto 0);
    signal dis_0_addr_1_reg_1663 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_1_addr_1_reg_1668 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_2_addr_1_reg_1673 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_3_addr_1_reg_1678 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_4_addr_1_reg_1683 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_5_addr_1_reg_1688 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_6_addr_1_reg_1693 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_7_addr_1_reg_1698 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_1331_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_reg_1743 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal x2_1_fu_1337_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_predicate_tran3to4_state2 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal local_temp_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_temp_0_ce0 : STD_LOGIC;
    signal local_temp_0_we0 : STD_LOGIC;
    signal local_temp_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_temp_1_ce0 : STD_LOGIC;
    signal local_temp_1_we0 : STD_LOGIC;
    signal local_temp_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_temp_2_ce0 : STD_LOGIC;
    signal local_temp_2_we0 : STD_LOGIC;
    signal local_temp_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_temp_3_ce0 : STD_LOGIC;
    signal local_temp_3_we0 : STD_LOGIC;
    signal local_temp_3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_temp_4_ce0 : STD_LOGIC;
    signal local_temp_4_we0 : STD_LOGIC;
    signal local_temp_4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_4_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_temp_5_ce0 : STD_LOGIC;
    signal local_temp_5_we0 : STD_LOGIC;
    signal local_temp_5_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_5_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_temp_6_ce0 : STD_LOGIC;
    signal local_temp_6_we0 : STD_LOGIC;
    signal local_temp_6_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_6_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal local_temp_7_ce0 : STD_LOGIC;
    signal local_temp_7_we0 : STD_LOGIC;
    signal local_temp_7_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal local_temp_7_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_0_ce0 : STD_LOGIC;
    signal dis_0_we0 : STD_LOGIC;
    signal dis_0_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_0_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_1_ce0 : STD_LOGIC;
    signal dis_1_we0 : STD_LOGIC;
    signal dis_1_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_1_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_2_ce0 : STD_LOGIC;
    signal dis_2_we0 : STD_LOGIC;
    signal dis_2_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_2_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_3_ce0 : STD_LOGIC;
    signal dis_3_we0 : STD_LOGIC;
    signal dis_3_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_3_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_4_ce0 : STD_LOGIC;
    signal dis_4_we0 : STD_LOGIC;
    signal dis_4_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_4_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_5_ce0 : STD_LOGIC;
    signal dis_5_we0 : STD_LOGIC;
    signal dis_5_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_5_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_6_ce0 : STD_LOGIC;
    signal dis_6_we0 : STD_LOGIC;
    signal dis_6_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_6_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal dis_7_ce0 : STD_LOGIC;
    signal dis_7_we0 : STD_LOGIC;
    signal dis_7_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dis_7_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_update_fu_907_ap_start : STD_LOGIC;
    signal grp_update_fu_907_ap_done : STD_LOGIC;
    signal grp_update_fu_907_ap_idle : STD_LOGIC;
    signal grp_update_fu_907_ap_ready : STD_LOGIC;
    signal grp_update_fu_907_temp_0_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_temp_0_ce0 : STD_LOGIC;
    signal grp_update_fu_907_temp_1_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_temp_1_ce0 : STD_LOGIC;
    signal grp_update_fu_907_temp_2_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_temp_2_ce0 : STD_LOGIC;
    signal grp_update_fu_907_temp_3_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_temp_3_ce0 : STD_LOGIC;
    signal grp_update_fu_907_temp_4_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_temp_4_ce0 : STD_LOGIC;
    signal grp_update_fu_907_temp_5_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_temp_5_ce0 : STD_LOGIC;
    signal grp_update_fu_907_temp_6_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_temp_6_ce0 : STD_LOGIC;
    signal grp_update_fu_907_temp_7_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_temp_7_ce0 : STD_LOGIC;
    signal grp_update_fu_907_ap_return_0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_4 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_5 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_6 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_7 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_8 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_9 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_10 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_11 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_12 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_13 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_14 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_15 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_16 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_17 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_18 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_19 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_20 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_21 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_22 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_23 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_24 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_25 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_26 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_27 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_28 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_update_fu_907_ap_return_29 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_863 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond2_fu_1143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_reg_874 : STD_LOGIC_VECTOR (16 downto 0);
    signal i1_reg_885 : STD_LOGIC_VECTOR (5 downto 0);
    signal x2_reg_896 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_update_fu_907_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal newIndex7_fu_1168_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal newIndex9_fu_1235_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_32_fu_1154_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal local_num_elements_cast1_cast_fu_953_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_957_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_29_fu_963_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_30_fu_973_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal newIndex_fu_990_p4 : STD_LOGIC_VECTOR (28 downto 0);
    signal x1_1_s_fu_1012_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_1_1_fu_1023_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_1_2_fu_1034_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_1_3_fu_1045_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_1_4_fu_1056_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_1_5_fu_1067_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal x1_1_6_fu_1078_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal newIndex6_fu_1158_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond_fu_1194_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_1207_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal newIndex8_fu_1225_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_cast_mid2_fu_1255_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal arrayNo_fu_1264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1289_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_1311_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_9_mid2_fu_1258_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_11_fu_1315_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_12_fu_1321_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_12_cast_fu_1327_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_fu_1267_p10 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_1342_p0 : STD_LOGIC_VECTOR (10 downto 0);
    signal bound_fu_1342_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_2_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_3_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_4_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_5_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_6_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_7_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_8_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_9_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_10_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_11_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_12_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_13_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_14_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_15_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_16_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_17_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_18_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_19_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_20_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_21_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_22_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_23_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_24_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_25_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_26_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_27_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_28_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_return_29_preg : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_1342_p00 : STD_LOGIC_VECTOR (16 downto 0);

    component digitrec_kernel_update IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        temp_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_0_ce0 : OUT STD_LOGIC;
        temp_0_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        temp_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_1_ce0 : OUT STD_LOGIC;
        temp_1_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        temp_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_2_ce0 : OUT STD_LOGIC;
        temp_2_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        temp_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_3_ce0 : OUT STD_LOGIC;
        temp_3_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        temp_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_4_ce0 : OUT STD_LOGIC;
        temp_4_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        temp_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_5_ce0 : OUT STD_LOGIC;
        temp_5_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        temp_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_6_ce0 : OUT STD_LOGIC;
        temp_6_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        temp_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        temp_7_ce0 : OUT STD_LOGIC;
        temp_7_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        knn_mat_0_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_0_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_0_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_0_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_1_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_1_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_1_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_1_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_2_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_2_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_2_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_2_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_3_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_3_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_3_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_3_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_4_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_4_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_4_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_4_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_5_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_5_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_5_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_5_3_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_6_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_6_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_6_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_7_0_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_7_1_read : IN STD_LOGIC_VECTOR (7 downto 0);
        knn_mat_7_2_read : IN STD_LOGIC_VECTOR (7 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (7 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component digitrec_kernel_digitrec_kernel_mux_832_64_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        din6_WIDTH : INTEGER;
        din7_WIDTH : INTEGER;
        din8_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        din2 : IN STD_LOGIC_VECTOR (63 downto 0);
        din3 : IN STD_LOGIC_VECTOR (63 downto 0);
        din4 : IN STD_LOGIC_VECTOR (63 downto 0);
        din5 : IN STD_LOGIC_VECTOR (63 downto 0);
        din6 : IN STD_LOGIC_VECTOR (63 downto 0);
        din7 : IN STD_LOGIC_VECTOR (63 downto 0);
        din8 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component digitrec_kernel_digitrec_kernel_mul_mul_11ns_7ns_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component digitrec_kernel_compute_local_temp_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    local_temp_0_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_temp_0_address0,
        ce0 => local_temp_0_ce0,
        we0 => local_temp_0_we0,
        d0 => local_temp_0_d0,
        q0 => local_temp_0_q0);

    local_temp_1_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_temp_1_address0,
        ce0 => local_temp_1_ce0,
        we0 => local_temp_1_we0,
        d0 => local_temp_1_d0,
        q0 => local_temp_1_q0);

    local_temp_2_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_temp_2_address0,
        ce0 => local_temp_2_ce0,
        we0 => local_temp_2_we0,
        d0 => local_temp_2_d0,
        q0 => local_temp_2_q0);

    local_temp_3_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_temp_3_address0,
        ce0 => local_temp_3_ce0,
        we0 => local_temp_3_we0,
        d0 => local_temp_3_d0,
        q0 => local_temp_3_q0);

    local_temp_4_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_temp_4_address0,
        ce0 => local_temp_4_ce0,
        we0 => local_temp_4_we0,
        d0 => local_temp_4_d0,
        q0 => local_temp_4_q0);

    local_temp_5_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_temp_5_address0,
        ce0 => local_temp_5_ce0,
        we0 => local_temp_5_we0,
        d0 => local_temp_5_d0,
        q0 => local_temp_5_q0);

    local_temp_6_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_temp_6_address0,
        ce0 => local_temp_6_ce0,
        we0 => local_temp_6_we0,
        d0 => local_temp_6_d0,
        q0 => local_temp_6_q0);

    local_temp_7_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => local_temp_7_address0,
        ce0 => local_temp_7_ce0,
        we0 => local_temp_7_we0,
        d0 => local_temp_7_d0,
        q0 => local_temp_7_q0);

    dis_0_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dis_0_address0,
        ce0 => dis_0_ce0,
        we0 => dis_0_we0,
        d0 => dis_0_d0,
        q0 => dis_0_q0);

    dis_1_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dis_1_address0,
        ce0 => dis_1_ce0,
        we0 => dis_1_we0,
        d0 => dis_1_d0,
        q0 => dis_1_q0);

    dis_2_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dis_2_address0,
        ce0 => dis_2_ce0,
        we0 => dis_2_we0,
        d0 => dis_2_d0,
        q0 => dis_2_q0);

    dis_3_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dis_3_address0,
        ce0 => dis_3_ce0,
        we0 => dis_3_we0,
        d0 => dis_3_d0,
        q0 => dis_3_q0);

    dis_4_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dis_4_address0,
        ce0 => dis_4_ce0,
        we0 => dis_4_we0,
        d0 => dis_4_d0,
        q0 => dis_4_q0);

    dis_5_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dis_5_address0,
        ce0 => dis_5_ce0,
        we0 => dis_5_we0,
        d0 => dis_5_d0,
        q0 => dis_5_q0);

    dis_6_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dis_6_address0,
        ce0 => dis_6_ce0,
        we0 => dis_6_we0,
        d0 => dis_6_d0,
        q0 => dis_6_q0);

    dis_7_U : component digitrec_kernel_compute_local_temp_0
    generic map (
        DataWidth => 64,
        AddressRange => 225,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dis_7_address0,
        ce0 => dis_7_ce0,
        we0 => dis_7_we0,
        d0 => dis_7_d0,
        q0 => dis_7_q0);

    grp_update_fu_907 : component digitrec_kernel_update
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_update_fu_907_ap_start,
        ap_done => grp_update_fu_907_ap_done,
        ap_idle => grp_update_fu_907_ap_idle,
        ap_ready => grp_update_fu_907_ap_ready,
        temp_0_address0 => grp_update_fu_907_temp_0_address0,
        temp_0_ce0 => grp_update_fu_907_temp_0_ce0,
        temp_0_q0 => dis_0_q0,
        temp_1_address0 => grp_update_fu_907_temp_1_address0,
        temp_1_ce0 => grp_update_fu_907_temp_1_ce0,
        temp_1_q0 => dis_1_q0,
        temp_2_address0 => grp_update_fu_907_temp_2_address0,
        temp_2_ce0 => grp_update_fu_907_temp_2_ce0,
        temp_2_q0 => dis_2_q0,
        temp_3_address0 => grp_update_fu_907_temp_3_address0,
        temp_3_ce0 => grp_update_fu_907_temp_3_ce0,
        temp_3_q0 => dis_3_q0,
        temp_4_address0 => grp_update_fu_907_temp_4_address0,
        temp_4_ce0 => grp_update_fu_907_temp_4_ce0,
        temp_4_q0 => dis_4_q0,
        temp_5_address0 => grp_update_fu_907_temp_5_address0,
        temp_5_ce0 => grp_update_fu_907_temp_5_ce0,
        temp_5_q0 => dis_5_q0,
        temp_6_address0 => grp_update_fu_907_temp_6_address0,
        temp_6_ce0 => grp_update_fu_907_temp_6_ce0,
        temp_6_q0 => dis_6_q0,
        temp_7_address0 => grp_update_fu_907_temp_7_address0,
        temp_7_ce0 => grp_update_fu_907_temp_7_ce0,
        temp_7_q0 => dis_7_q0,
        knn_mat_0_0_read => knn_mat_0_0_read,
        knn_mat_0_1_read => knn_mat_0_1_read,
        knn_mat_0_2_read => knn_mat_0_2_read,
        knn_mat_0_3_read => knn_mat_0_3_read,
        knn_mat_1_0_read => knn_mat_1_0_read,
        knn_mat_1_1_read => knn_mat_1_1_read,
        knn_mat_1_2_read => knn_mat_1_2_read,
        knn_mat_1_3_read => knn_mat_1_3_read,
        knn_mat_2_0_read => knn_mat_2_0_read,
        knn_mat_2_1_read => knn_mat_2_1_read,
        knn_mat_2_2_read => knn_mat_2_2_read,
        knn_mat_2_3_read => knn_mat_2_3_read,
        knn_mat_3_0_read => knn_mat_3_0_read,
        knn_mat_3_1_read => knn_mat_3_1_read,
        knn_mat_3_2_read => knn_mat_3_2_read,
        knn_mat_3_3_read => knn_mat_3_3_read,
        knn_mat_4_0_read => knn_mat_4_0_read,
        knn_mat_4_1_read => knn_mat_4_1_read,
        knn_mat_4_2_read => knn_mat_4_2_read,
        knn_mat_4_3_read => knn_mat_4_3_read,
        knn_mat_5_0_read => knn_mat_5_0_read,
        knn_mat_5_1_read => knn_mat_5_1_read,
        knn_mat_5_2_read => knn_mat_5_2_read,
        knn_mat_5_3_read => knn_mat_5_3_read,
        knn_mat_6_0_read => knn_mat_6_0_read,
        knn_mat_6_1_read => knn_mat_6_1_read,
        knn_mat_6_2_read => knn_mat_6_2_read,
        knn_mat_7_0_read => knn_mat_7_0_read,
        knn_mat_7_1_read => knn_mat_7_1_read,
        knn_mat_7_2_read => knn_mat_7_2_read,
        ap_return_0 => grp_update_fu_907_ap_return_0,
        ap_return_1 => grp_update_fu_907_ap_return_1,
        ap_return_2 => grp_update_fu_907_ap_return_2,
        ap_return_3 => grp_update_fu_907_ap_return_3,
        ap_return_4 => grp_update_fu_907_ap_return_4,
        ap_return_5 => grp_update_fu_907_ap_return_5,
        ap_return_6 => grp_update_fu_907_ap_return_6,
        ap_return_7 => grp_update_fu_907_ap_return_7,
        ap_return_8 => grp_update_fu_907_ap_return_8,
        ap_return_9 => grp_update_fu_907_ap_return_9,
        ap_return_10 => grp_update_fu_907_ap_return_10,
        ap_return_11 => grp_update_fu_907_ap_return_11,
        ap_return_12 => grp_update_fu_907_ap_return_12,
        ap_return_13 => grp_update_fu_907_ap_return_13,
        ap_return_14 => grp_update_fu_907_ap_return_14,
        ap_return_15 => grp_update_fu_907_ap_return_15,
        ap_return_16 => grp_update_fu_907_ap_return_16,
        ap_return_17 => grp_update_fu_907_ap_return_17,
        ap_return_18 => grp_update_fu_907_ap_return_18,
        ap_return_19 => grp_update_fu_907_ap_return_19,
        ap_return_20 => grp_update_fu_907_ap_return_20,
        ap_return_21 => grp_update_fu_907_ap_return_21,
        ap_return_22 => grp_update_fu_907_ap_return_22,
        ap_return_23 => grp_update_fu_907_ap_return_23,
        ap_return_24 => grp_update_fu_907_ap_return_24,
        ap_return_25 => grp_update_fu_907_ap_return_25,
        ap_return_26 => grp_update_fu_907_ap_return_26,
        ap_return_27 => grp_update_fu_907_ap_return_27,
        ap_return_28 => grp_update_fu_907_ap_return_28,
        ap_return_29 => grp_update_fu_907_ap_return_29);

    digitrec_kernel_mux_832_64_1_1_U94 : component digitrec_kernel_digitrec_kernel_mux_832_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => dis_0_q0,
        din1 => dis_1_q0,
        din2 => dis_2_q0,
        din3 => dis_3_q0,
        din4 => dis_4_q0,
        din5 => dis_5_q0,
        din6 => dis_6_q0,
        din7 => dis_7_q0,
        din8 => arrayNo_fu_1264_p1,
        dout => tmp_s_fu_1267_p10);

    digitrec_kernel_mux_832_64_1_1_U95 : component digitrec_kernel_digitrec_kernel_mux_832_64_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        din2_WIDTH => 64,
        din3_WIDTH => 64,
        din4_WIDTH => 64,
        din5_WIDTH => 64,
        din6_WIDTH => 64,
        din7_WIDTH => 64,
        din8_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        din0 => local_temp_0_q0,
        din1 => local_temp_1_q0,
        din2 => local_temp_2_q0,
        din3 => local_temp_3_q0,
        din4 => local_temp_4_q0,
        din5 => local_temp_5_q0,
        din6 => local_temp_6_q0,
        din7 => local_temp_7_q0,
        din8 => arrayNo_fu_1264_p1,
        dout => tmp_26_fu_1289_p10);

    digitrec_kernel_mul_mul_11ns_7ns_17_1_1_U96 : component digitrec_kernel_digitrec_kernel_mul_mul_11ns_7ns_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 7,
        dout_WIDTH => 17)
    port map (
        din0 => bound_fu_1342_p0,
        din1 => bound_fu_1342_p1,
        dout => bound_fu_1342_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_predicate_tran3to4_state2 = ap_const_boolean_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_0_preg <= grp_update_fu_907_ap_return_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_10_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_10_preg <= grp_update_fu_907_ap_return_10;
                end if; 
            end if;
        end if;
    end process;


    ap_return_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_11_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_11_preg <= grp_update_fu_907_ap_return_11;
                end if; 
            end if;
        end if;
    end process;


    ap_return_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_12_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_12_preg <= grp_update_fu_907_ap_return_12;
                end if; 
            end if;
        end if;
    end process;


    ap_return_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_13_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_13_preg <= grp_update_fu_907_ap_return_13;
                end if; 
            end if;
        end if;
    end process;


    ap_return_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_14_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_14_preg <= grp_update_fu_907_ap_return_14;
                end if; 
            end if;
        end if;
    end process;


    ap_return_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_15_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_15_preg <= grp_update_fu_907_ap_return_15;
                end if; 
            end if;
        end if;
    end process;


    ap_return_16_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_16_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_16_preg <= grp_update_fu_907_ap_return_16;
                end if; 
            end if;
        end if;
    end process;


    ap_return_17_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_17_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_17_preg <= grp_update_fu_907_ap_return_17;
                end if; 
            end if;
        end if;
    end process;


    ap_return_18_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_18_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_18_preg <= grp_update_fu_907_ap_return_18;
                end if; 
            end if;
        end if;
    end process;


    ap_return_19_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_19_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_19_preg <= grp_update_fu_907_ap_return_19;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_1_preg <= grp_update_fu_907_ap_return_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_20_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_20_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_20_preg <= grp_update_fu_907_ap_return_20;
                end if; 
            end if;
        end if;
    end process;


    ap_return_21_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_21_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_21_preg <= grp_update_fu_907_ap_return_21;
                end if; 
            end if;
        end if;
    end process;


    ap_return_22_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_22_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_22_preg <= grp_update_fu_907_ap_return_22;
                end if; 
            end if;
        end if;
    end process;


    ap_return_23_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_23_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_23_preg <= grp_update_fu_907_ap_return_23;
                end if; 
            end if;
        end if;
    end process;


    ap_return_24_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_24_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_24_preg <= grp_update_fu_907_ap_return_24;
                end if; 
            end if;
        end if;
    end process;


    ap_return_25_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_25_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_25_preg <= grp_update_fu_907_ap_return_25;
                end if; 
            end if;
        end if;
    end process;


    ap_return_26_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_26_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_26_preg <= grp_update_fu_907_ap_return_26;
                end if; 
            end if;
        end if;
    end process;


    ap_return_27_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_27_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_27_preg <= grp_update_fu_907_ap_return_27;
                end if; 
            end if;
        end if;
    end process;


    ap_return_28_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_28_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_28_preg <= grp_update_fu_907_ap_return_28;
                end if; 
            end if;
        end if;
    end process;


    ap_return_29_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_29_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_29_preg <= grp_update_fu_907_ap_return_29;
                end if; 
            end if;
        end if;
    end process;


    ap_return_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_2_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_2_preg <= grp_update_fu_907_ap_return_2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_3_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_3_preg <= grp_update_fu_907_ap_return_3;
                end if; 
            end if;
        end if;
    end process;


    ap_return_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_4_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_4_preg <= grp_update_fu_907_ap_return_4;
                end if; 
            end if;
        end if;
    end process;


    ap_return_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_5_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_5_preg <= grp_update_fu_907_ap_return_5;
                end if; 
            end if;
        end if;
    end process;


    ap_return_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_6_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_6_preg <= grp_update_fu_907_ap_return_6;
                end if; 
            end if;
        end if;
    end process;


    ap_return_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_7_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_7_preg <= grp_update_fu_907_ap_return_7;
                end if; 
            end if;
        end if;
    end process;


    ap_return_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_8_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_8_preg <= grp_update_fu_907_ap_return_8;
                end if; 
            end if;
        end if;
    end process;


    ap_return_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_9_preg <= ap_const_lv8_0;
            else
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                    ap_return_9_preg <= grp_update_fu_907_ap_return_9;
                end if; 
            end if;
        end if;
    end process;


    grp_update_fu_907_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_update_fu_907_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    grp_update_fu_907_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_update_fu_907_ap_ready = ap_const_logic_1)) then 
                    grp_update_fu_907_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_885_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                i1_reg_885 <= tmp_8_cast_mid2_v_reg_1652;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i1_reg_885 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    i_reg_863_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_reg_863 <= i_3_fu_1148_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_863 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_874_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                indvar_flatten_reg_874 <= indvar_flatten_next_reg_1642;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_874 <= ap_const_lv17_0;
            end if; 
        end if;
    end process;

    x1_reg_852_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_1084_p2 = ap_const_lv1_1) and (tmp_6_fu_1073_p2 = ap_const_lv1_1) and (tmp_5_fu_1062_p2 = ap_const_lv1_1) and (tmp_4_fu_1051_p2 = ap_const_lv1_1) and (tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_fu_985_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                x1_reg_852 <= x1_1_7_fu_1089_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                x1_reg_852 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    x2_reg_896_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                x2_reg_896 <= x2_1_fu_1337_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                x2_reg_896 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound_reg_1633 <= bound_fu_1342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_1183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                dis_0_addr_1_reg_1663 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
                dis_1_addr_1_reg_1668 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
                dis_2_addr_1_reg_1673 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
                dis_3_addr_1_reg_1678 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
                dis_4_addr_1_reg_1683 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
                dis_5_addr_1_reg_1688 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
                dis_6_addr_1_reg_1693 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
                dis_7_addr_1_reg_1698 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
                tmp_33_reg_1658 <= tmp_33_fu_1221_p1;
                tmp_8_cast_mid2_v_reg_1652 <= tmp_8_cast_mid2_v_fu_1213_p3;
                x2_mid2_reg_1647 <= x2_mid2_fu_1199_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                exitcond_flatten_reg_1638 <= exitcond_flatten_fu_1183_p2;
                indvar_flatten_next_reg_1642 <= indvar_flatten_next_fu_1188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    local_num_elements_cast1_reg_1517(10 downto 0) <= local_num_elements_cast1_fu_949_p1(10 downto 0);
                    p_cast4_reg_1528(11 downto 3) <= p_cast4_fu_981_p1(11 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_fu_985_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    newIndex5_reg_1537(28 downto 0) <= newIndex5_fu_1000_p1(28 downto 0);
                tmp_1_reg_1554 <= tmp_1_fu_1018_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_13_reg_1743 <= tmp_13_fu_1331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_fu_985_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_2_reg_1563 <= tmp_2_fu_1029_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_31_reg_1533 <= tmp_31_fu_985_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_fu_985_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_3_reg_1572 <= tmp_3_fu_1040_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_fu_985_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_4_reg_1581 <= tmp_4_fu_1051_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_1051_p2 = ap_const_lv1_1) and (tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_fu_985_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_5_reg_1590 <= tmp_5_fu_1062_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_5_fu_1062_p2 = ap_const_lv1_1) and (tmp_4_fu_1051_p2 = ap_const_lv1_1) and (tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_fu_985_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_6_reg_1599 <= tmp_6_fu_1073_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_1073_p2 = ap_const_lv1_1) and (tmp_5_fu_1062_p2 = ap_const_lv1_1) and (tmp_4_fu_1051_p2 = ap_const_lv1_1) and (tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_fu_985_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_7_reg_1608 <= tmp_7_fu_1084_p2;
            end if;
        end if;
    end process;
    local_num_elements_cast1_reg_1517(31 downto 11) <= "000000000000000000000";
    p_cast4_reg_1528(2 downto 0) <= "000";
    p_cast4_reg_1528(31 downto 12) <= "00000000000000000000";
    newIndex5_reg_1537(63 downto 29) <= "00000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state5, exitcond_flatten_fu_1183_p2, ap_CS_fsm_state7, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, grp_update_fu_907_ap_done, exitcond2_fu_1143_p2, ap_CS_fsm_state11)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                if (((exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((exitcond_flatten_fu_1183_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
    ap_CS_fsm_state5 <= ap_CS_fsm(3);
    ap_CS_fsm_state6 <= ap_CS_fsm(4);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_update_fu_907_ap_done, ap_CS_fsm_state11)
    begin
        if ((((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_predicate_tran3to4_state2_assign_proc : process(tmp_31_fu_985_p2, tmp_1_fu_1018_p2, tmp_2_fu_1029_p2, tmp_3_fu_1040_p2, tmp_4_fu_1051_p2, tmp_5_fu_1062_p2, tmp_6_fu_1073_p2, tmp_7_fu_1084_p2)
    begin
                ap_predicate_tran3to4_state2 <= ((tmp_31_fu_985_p2 = ap_const_lv1_1) or ((tmp_1_fu_1018_p2 = ap_const_lv1_0) and (tmp_31_fu_985_p2 = ap_const_lv1_0)) or ((tmp_1_fu_1018_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_0) and (tmp_31_fu_985_p2 = ap_const_lv1_0)) or ((tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (tmp_3_fu_1040_p2 = ap_const_lv1_0) and (tmp_31_fu_985_p2 = ap_const_lv1_0)) or ((tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (tmp_4_fu_1051_p2 = ap_const_lv1_0) and (tmp_31_fu_985_p2 = ap_const_lv1_0)) or ((tmp_4_fu_1051_p2 = ap_const_lv1_1) and (tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (tmp_5_fu_1062_p2 = ap_const_lv1_0) and (tmp_31_fu_985_p2 = ap_const_lv1_0)) or ((tmp_5_fu_1062_p2 = ap_const_lv1_1) and (tmp_4_fu_1051_p2 = ap_const_lv1_1) and (tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (tmp_6_fu_1073_p2 = ap_const_lv1_0) and (tmp_31_fu_985_p2 = ap_const_lv1_0)) or ((tmp_6_fu_1073_p2 = ap_const_lv1_1) and (tmp_5_fu_1062_p2 = ap_const_lv1_1) and (tmp_4_fu_1051_p2 = ap_const_lv1_1) and (tmp_3_fu_1040_p2 = ap_const_lv1_1) and (tmp_2_fu_1029_p2 = ap_const_lv1_1) and (tmp_1_fu_1018_p2 = ap_const_lv1_1) and (tmp_7_fu_1084_p2 = ap_const_lv1_0) and (tmp_31_fu_985_p2 = ap_const_lv1_0)));
    end process;


    ap_ready_assign_proc : process(grp_update_fu_907_ap_done, ap_CS_fsm_state11)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_0, ap_CS_fsm_state11, ap_return_0_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_0 <= grp_update_fu_907_ap_return_0;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_1, ap_CS_fsm_state11, ap_return_1_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_1 <= grp_update_fu_907_ap_return_1;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    ap_return_10_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_10, ap_CS_fsm_state11, ap_return_10_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_10 <= grp_update_fu_907_ap_return_10;
        else 
            ap_return_10 <= ap_return_10_preg;
        end if; 
    end process;


    ap_return_11_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_11, ap_CS_fsm_state11, ap_return_11_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_11 <= grp_update_fu_907_ap_return_11;
        else 
            ap_return_11 <= ap_return_11_preg;
        end if; 
    end process;


    ap_return_12_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_12, ap_CS_fsm_state11, ap_return_12_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_12 <= grp_update_fu_907_ap_return_12;
        else 
            ap_return_12 <= ap_return_12_preg;
        end if; 
    end process;


    ap_return_13_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_13, ap_CS_fsm_state11, ap_return_13_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_13 <= grp_update_fu_907_ap_return_13;
        else 
            ap_return_13 <= ap_return_13_preg;
        end if; 
    end process;


    ap_return_14_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_14, ap_CS_fsm_state11, ap_return_14_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_14 <= grp_update_fu_907_ap_return_14;
        else 
            ap_return_14 <= ap_return_14_preg;
        end if; 
    end process;


    ap_return_15_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_15, ap_CS_fsm_state11, ap_return_15_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_15 <= grp_update_fu_907_ap_return_15;
        else 
            ap_return_15 <= ap_return_15_preg;
        end if; 
    end process;


    ap_return_16_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_16, ap_CS_fsm_state11, ap_return_16_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_16 <= grp_update_fu_907_ap_return_16;
        else 
            ap_return_16 <= ap_return_16_preg;
        end if; 
    end process;


    ap_return_17_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_17, ap_CS_fsm_state11, ap_return_17_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_17 <= grp_update_fu_907_ap_return_17;
        else 
            ap_return_17 <= ap_return_17_preg;
        end if; 
    end process;


    ap_return_18_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_18, ap_CS_fsm_state11, ap_return_18_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_18 <= grp_update_fu_907_ap_return_18;
        else 
            ap_return_18 <= ap_return_18_preg;
        end if; 
    end process;


    ap_return_19_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_19, ap_CS_fsm_state11, ap_return_19_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_19 <= grp_update_fu_907_ap_return_19;
        else 
            ap_return_19 <= ap_return_19_preg;
        end if; 
    end process;


    ap_return_2_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_2, ap_CS_fsm_state11, ap_return_2_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_2 <= grp_update_fu_907_ap_return_2;
        else 
            ap_return_2 <= ap_return_2_preg;
        end if; 
    end process;


    ap_return_20_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_20, ap_CS_fsm_state11, ap_return_20_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_20 <= grp_update_fu_907_ap_return_20;
        else 
            ap_return_20 <= ap_return_20_preg;
        end if; 
    end process;


    ap_return_21_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_21, ap_CS_fsm_state11, ap_return_21_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_21 <= grp_update_fu_907_ap_return_21;
        else 
            ap_return_21 <= ap_return_21_preg;
        end if; 
    end process;


    ap_return_22_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_22, ap_CS_fsm_state11, ap_return_22_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_22 <= grp_update_fu_907_ap_return_22;
        else 
            ap_return_22 <= ap_return_22_preg;
        end if; 
    end process;


    ap_return_23_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_23, ap_CS_fsm_state11, ap_return_23_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_23 <= grp_update_fu_907_ap_return_23;
        else 
            ap_return_23 <= ap_return_23_preg;
        end if; 
    end process;


    ap_return_24_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_24, ap_CS_fsm_state11, ap_return_24_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_24 <= grp_update_fu_907_ap_return_24;
        else 
            ap_return_24 <= ap_return_24_preg;
        end if; 
    end process;


    ap_return_25_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_25, ap_CS_fsm_state11, ap_return_25_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_25 <= grp_update_fu_907_ap_return_25;
        else 
            ap_return_25 <= ap_return_25_preg;
        end if; 
    end process;


    ap_return_26_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_26, ap_CS_fsm_state11, ap_return_26_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_26 <= grp_update_fu_907_ap_return_26;
        else 
            ap_return_26 <= ap_return_26_preg;
        end if; 
    end process;


    ap_return_27_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_27, ap_CS_fsm_state11, ap_return_27_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_27 <= grp_update_fu_907_ap_return_27;
        else 
            ap_return_27 <= ap_return_27_preg;
        end if; 
    end process;


    ap_return_28_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_28, ap_CS_fsm_state11, ap_return_28_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_28 <= grp_update_fu_907_ap_return_28;
        else 
            ap_return_28 <= ap_return_28_preg;
        end if; 
    end process;


    ap_return_29_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_29, ap_CS_fsm_state11, ap_return_29_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_29 <= grp_update_fu_907_ap_return_29;
        else 
            ap_return_29 <= ap_return_29_preg;
        end if; 
    end process;


    ap_return_3_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_3, ap_CS_fsm_state11, ap_return_3_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_3 <= grp_update_fu_907_ap_return_3;
        else 
            ap_return_3 <= ap_return_3_preg;
        end if; 
    end process;


    ap_return_4_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_4, ap_CS_fsm_state11, ap_return_4_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_4 <= grp_update_fu_907_ap_return_4;
        else 
            ap_return_4 <= ap_return_4_preg;
        end if; 
    end process;


    ap_return_5_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_5, ap_CS_fsm_state11, ap_return_5_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_5 <= grp_update_fu_907_ap_return_5;
        else 
            ap_return_5 <= ap_return_5_preg;
        end if; 
    end process;


    ap_return_6_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_6, ap_CS_fsm_state11, ap_return_6_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_6 <= grp_update_fu_907_ap_return_6;
        else 
            ap_return_6 <= ap_return_6_preg;
        end if; 
    end process;


    ap_return_7_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_7, ap_CS_fsm_state11, ap_return_7_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_7 <= grp_update_fu_907_ap_return_7;
        else 
            ap_return_7 <= ap_return_7_preg;
        end if; 
    end process;


    ap_return_8_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_8, ap_CS_fsm_state11, ap_return_8_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_8 <= grp_update_fu_907_ap_return_8;
        else 
            ap_return_8 <= ap_return_8_preg;
        end if; 
    end process;


    ap_return_9_assign_proc : process(grp_update_fu_907_ap_done, grp_update_fu_907_ap_return_9, ap_CS_fsm_state11, ap_return_9_preg)
    begin
        if (((grp_update_fu_907_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            ap_return_9 <= grp_update_fu_907_ap_return_9;
        else 
            ap_return_9 <= ap_return_9_preg;
        end if; 
    end process;

    arrayNo_fu_1264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_reg_1658),32));
    bound_fu_1342_p0 <= bound_fu_1342_p00(11 - 1 downto 0);
    bound_fu_1342_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(local_num_elements),17));
    bound_fu_1342_p1 <= ap_const_lv17_31(7 - 1 downto 0);

    dis_0_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, dis_0_addr_1_reg_1663, ap_CS_fsm_state9, grp_update_fu_907_temp_0_address0, ap_CS_fsm_state11, newIndex7_fu_1168_p1, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_0_address0 <= dis_0_addr_1_reg_1663;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dis_0_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_0_address0 <= newIndex7_fu_1168_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_0_address0 <= grp_update_fu_907_temp_0_address0;
        else 
            dis_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dis_0_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_update_fu_907_temp_0_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dis_0_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_0_ce0 <= grp_update_fu_907_temp_0_ce0;
        else 
            dis_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_0_d0_assign_proc : process(ap_CS_fsm_state5, tmp_13_reg_1743, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_0_d0 <= tmp_13_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_0_d0 <= ap_const_lv64_0;
        else 
            dis_0_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dis_0_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_reg_1638, tmp_33_reg_1658, ap_CS_fsm_state9, exitcond2_fu_1143_p2, tmp_32_fu_1154_p1)
    begin
        if ((((tmp_33_reg_1658 = ap_const_lv3_0) and (exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_32_fu_1154_p1 = ap_const_lv3_0) and (exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            dis_0_we0 <= ap_const_logic_1;
        else 
            dis_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_1_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, dis_1_addr_1_reg_1668, ap_CS_fsm_state9, grp_update_fu_907_temp_1_address0, ap_CS_fsm_state11, newIndex7_fu_1168_p1, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_1_address0 <= dis_1_addr_1_reg_1668;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dis_1_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_1_address0 <= newIndex7_fu_1168_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_1_address0 <= grp_update_fu_907_temp_1_address0;
        else 
            dis_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dis_1_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_update_fu_907_temp_1_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dis_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_1_ce0 <= grp_update_fu_907_temp_1_ce0;
        else 
            dis_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_1_d0_assign_proc : process(ap_CS_fsm_state5, tmp_13_reg_1743, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_1_d0 <= tmp_13_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_1_d0 <= ap_const_lv64_0;
        else 
            dis_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dis_1_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_reg_1638, tmp_33_reg_1658, ap_CS_fsm_state9, exitcond2_fu_1143_p2, tmp_32_fu_1154_p1)
    begin
        if ((((tmp_33_reg_1658 = ap_const_lv3_1) and (exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_32_fu_1154_p1 = ap_const_lv3_1) and (exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            dis_1_we0 <= ap_const_logic_1;
        else 
            dis_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_2_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, dis_2_addr_1_reg_1673, ap_CS_fsm_state9, grp_update_fu_907_temp_2_address0, ap_CS_fsm_state11, newIndex7_fu_1168_p1, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_2_address0 <= dis_2_addr_1_reg_1673;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dis_2_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_2_address0 <= newIndex7_fu_1168_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_2_address0 <= grp_update_fu_907_temp_2_address0;
        else 
            dis_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dis_2_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_update_fu_907_temp_2_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dis_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_2_ce0 <= grp_update_fu_907_temp_2_ce0;
        else 
            dis_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_2_d0_assign_proc : process(ap_CS_fsm_state5, tmp_13_reg_1743, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_2_d0 <= tmp_13_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_2_d0 <= ap_const_lv64_0;
        else 
            dis_2_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dis_2_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_reg_1638, tmp_33_reg_1658, ap_CS_fsm_state9, exitcond2_fu_1143_p2, tmp_32_fu_1154_p1)
    begin
        if ((((tmp_33_reg_1658 = ap_const_lv3_2) and (exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_32_fu_1154_p1 = ap_const_lv3_2) and (exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            dis_2_we0 <= ap_const_logic_1;
        else 
            dis_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_3_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, dis_3_addr_1_reg_1678, ap_CS_fsm_state9, grp_update_fu_907_temp_3_address0, ap_CS_fsm_state11, newIndex7_fu_1168_p1, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_3_address0 <= dis_3_addr_1_reg_1678;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dis_3_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_3_address0 <= newIndex7_fu_1168_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_3_address0 <= grp_update_fu_907_temp_3_address0;
        else 
            dis_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dis_3_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_update_fu_907_temp_3_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dis_3_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_3_ce0 <= grp_update_fu_907_temp_3_ce0;
        else 
            dis_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_3_d0_assign_proc : process(ap_CS_fsm_state5, tmp_13_reg_1743, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_3_d0 <= tmp_13_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_3_d0 <= ap_const_lv64_0;
        else 
            dis_3_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dis_3_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_reg_1638, tmp_33_reg_1658, ap_CS_fsm_state9, exitcond2_fu_1143_p2, tmp_32_fu_1154_p1)
    begin
        if ((((tmp_33_reg_1658 = ap_const_lv3_3) and (exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_32_fu_1154_p1 = ap_const_lv3_3) and (exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            dis_3_we0 <= ap_const_logic_1;
        else 
            dis_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_4_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, dis_4_addr_1_reg_1683, ap_CS_fsm_state9, grp_update_fu_907_temp_4_address0, ap_CS_fsm_state11, newIndex7_fu_1168_p1, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_4_address0 <= dis_4_addr_1_reg_1683;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dis_4_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_4_address0 <= newIndex7_fu_1168_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_4_address0 <= grp_update_fu_907_temp_4_address0;
        else 
            dis_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dis_4_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_update_fu_907_temp_4_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dis_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_4_ce0 <= grp_update_fu_907_temp_4_ce0;
        else 
            dis_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_4_d0_assign_proc : process(ap_CS_fsm_state5, tmp_13_reg_1743, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_4_d0 <= tmp_13_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_4_d0 <= ap_const_lv64_0;
        else 
            dis_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dis_4_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_reg_1638, tmp_33_reg_1658, ap_CS_fsm_state9, exitcond2_fu_1143_p2, tmp_32_fu_1154_p1)
    begin
        if ((((tmp_33_reg_1658 = ap_const_lv3_4) and (exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_32_fu_1154_p1 = ap_const_lv3_4) and (exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            dis_4_we0 <= ap_const_logic_1;
        else 
            dis_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_5_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, dis_5_addr_1_reg_1688, ap_CS_fsm_state9, grp_update_fu_907_temp_5_address0, ap_CS_fsm_state11, newIndex7_fu_1168_p1, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_5_address0 <= dis_5_addr_1_reg_1688;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dis_5_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_5_address0 <= newIndex7_fu_1168_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_5_address0 <= grp_update_fu_907_temp_5_address0;
        else 
            dis_5_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dis_5_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_update_fu_907_temp_5_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dis_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_5_ce0 <= grp_update_fu_907_temp_5_ce0;
        else 
            dis_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_5_d0_assign_proc : process(ap_CS_fsm_state5, tmp_13_reg_1743, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_5_d0 <= tmp_13_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_5_d0 <= ap_const_lv64_0;
        else 
            dis_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dis_5_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_reg_1638, tmp_33_reg_1658, ap_CS_fsm_state9, exitcond2_fu_1143_p2, tmp_32_fu_1154_p1)
    begin
        if ((((tmp_33_reg_1658 = ap_const_lv3_5) and (exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_32_fu_1154_p1 = ap_const_lv3_5) and (exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            dis_5_we0 <= ap_const_logic_1;
        else 
            dis_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_6_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, dis_6_addr_1_reg_1693, ap_CS_fsm_state9, grp_update_fu_907_temp_6_address0, ap_CS_fsm_state11, newIndex7_fu_1168_p1, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_6_address0 <= dis_6_addr_1_reg_1693;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dis_6_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_6_address0 <= newIndex7_fu_1168_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_6_address0 <= grp_update_fu_907_temp_6_address0;
        else 
            dis_6_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dis_6_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_update_fu_907_temp_6_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dis_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_6_ce0 <= grp_update_fu_907_temp_6_ce0;
        else 
            dis_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_6_d0_assign_proc : process(ap_CS_fsm_state5, tmp_13_reg_1743, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_6_d0 <= tmp_13_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_6_d0 <= ap_const_lv64_0;
        else 
            dis_6_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dis_6_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_reg_1638, tmp_33_reg_1658, ap_CS_fsm_state9, exitcond2_fu_1143_p2, tmp_32_fu_1154_p1)
    begin
        if ((((tmp_33_reg_1658 = ap_const_lv3_6) and (exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_32_fu_1154_p1 = ap_const_lv3_6) and (exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            dis_6_we0 <= ap_const_logic_1;
        else 
            dis_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_7_address0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, dis_7_addr_1_reg_1698, ap_CS_fsm_state9, grp_update_fu_907_temp_7_address0, ap_CS_fsm_state11, newIndex7_fu_1168_p1, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_7_address0 <= dis_7_addr_1_reg_1698;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dis_7_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_7_address0 <= newIndex7_fu_1168_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_7_address0 <= grp_update_fu_907_temp_7_address0;
        else 
            dis_7_address0 <= "XXXXXXXX";
        end if; 
    end process;


    dis_7_ce0_assign_proc : process(ap_CS_fsm_state5, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_update_fu_907_temp_7_ce0, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            dis_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dis_7_ce0 <= grp_update_fu_907_temp_7_ce0;
        else 
            dis_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dis_7_d0_assign_proc : process(ap_CS_fsm_state5, tmp_13_reg_1743, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dis_7_d0 <= tmp_13_reg_1743;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dis_7_d0 <= ap_const_lv64_0;
        else 
            dis_7_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dis_7_we0_assign_proc : process(ap_CS_fsm_state5, exitcond_flatten_reg_1638, tmp_33_reg_1658, ap_CS_fsm_state9, exitcond2_fu_1143_p2, tmp_32_fu_1154_p1)
    begin
        if ((((tmp_33_reg_1658 = ap_const_lv3_7) and (exitcond_flatten_reg_1638 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9)) or ((tmp_32_fu_1154_p1 = ap_const_lv3_7) and (exitcond2_fu_1143_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5)))) then 
            dis_7_we0 <= ap_const_logic_1;
        else 
            dis_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_fu_1143_p2 <= "1" when (i_reg_863 = local_num_elements) else "0";
    exitcond_flatten_fu_1183_p2 <= "1" when (indvar_flatten_reg_874 = bound_reg_1633) else "0";
    exitcond_fu_1194_p2 <= "0" when (x2_reg_896 = local_num_elements) else "1";
    grp_update_fu_907_ap_start <= grp_update_fu_907_ap_start_reg;
    i_3_fu_1148_p2 <= std_logic_vector(unsigned(i_reg_863) + unsigned(ap_const_lv11_1));
    i_s_fu_1207_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i1_reg_885));
    indvar_flatten_next_fu_1188_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_874) + unsigned(ap_const_lv17_1));
    local_num_elements_cast1_cast_fu_953_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(local_num_elements),12));
    local_num_elements_cast1_fu_949_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(local_num_elements),32));

    local_temp_0_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, newIndex5_reg_1537, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_temp_0_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_0_address0 <= newIndex5_reg_1537(8 - 1 downto 0);
        else 
            local_temp_0_address0 <= "XXXXXXXX";
        end if; 
    end process;


    local_temp_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_temp_0_ce0 <= ap_const_logic_1;
        else 
            local_temp_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_temp_0_d0 <= (train_images_0_q0 xor test_image);

    local_temp_0_we0_assign_proc : process(tmp_31_reg_1533, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_0_we0 <= ap_const_logic_1;
        else 
            local_temp_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_temp_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, newIndex5_reg_1537, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_temp_1_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_1_address0 <= newIndex5_reg_1537(8 - 1 downto 0);
        else 
            local_temp_1_address0 <= "XXXXXXXX";
        end if; 
    end process;


    local_temp_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_temp_1_ce0 <= ap_const_logic_1;
        else 
            local_temp_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_temp_1_d0 <= (train_images_1_q0 xor test_image);

    local_temp_1_we0_assign_proc : process(tmp_31_reg_1533, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_1_reg_1554, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_1_reg_1554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_1_we0 <= ap_const_logic_1;
        else 
            local_temp_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_temp_2_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, newIndex5_reg_1537, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_temp_2_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_2_address0 <= newIndex5_reg_1537(8 - 1 downto 0);
        else 
            local_temp_2_address0 <= "XXXXXXXX";
        end if; 
    end process;


    local_temp_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_temp_2_ce0 <= ap_const_logic_1;
        else 
            local_temp_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_temp_2_d0 <= (train_images_2_q0 xor test_image);

    local_temp_2_we0_assign_proc : process(tmp_31_reg_1533, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_1_reg_1554, tmp_2_reg_1563, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_2_reg_1563 = ap_const_lv1_1) and (tmp_1_reg_1554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_2_we0 <= ap_const_logic_1;
        else 
            local_temp_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_temp_3_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, newIndex5_reg_1537, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_temp_3_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_3_address0 <= newIndex5_reg_1537(8 - 1 downto 0);
        else 
            local_temp_3_address0 <= "XXXXXXXX";
        end if; 
    end process;


    local_temp_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_temp_3_ce0 <= ap_const_logic_1;
        else 
            local_temp_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_temp_3_d0 <= (train_images_3_q0 xor test_image);

    local_temp_3_we0_assign_proc : process(tmp_31_reg_1533, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_1_reg_1554, tmp_2_reg_1563, tmp_3_reg_1572, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_3_reg_1572 = ap_const_lv1_1) and (tmp_2_reg_1563 = ap_const_lv1_1) and (tmp_1_reg_1554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_3_we0 <= ap_const_logic_1;
        else 
            local_temp_3_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_temp_4_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, newIndex5_reg_1537, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_temp_4_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_4_address0 <= newIndex5_reg_1537(8 - 1 downto 0);
        else 
            local_temp_4_address0 <= "XXXXXXXX";
        end if; 
    end process;


    local_temp_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_temp_4_ce0 <= ap_const_logic_1;
        else 
            local_temp_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_temp_4_d0 <= (train_images_4_q0 xor test_image);

    local_temp_4_we0_assign_proc : process(tmp_31_reg_1533, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_1_reg_1554, tmp_2_reg_1563, tmp_3_reg_1572, tmp_4_reg_1581, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_4_reg_1581 = ap_const_lv1_1) and (tmp_3_reg_1572 = ap_const_lv1_1) and (tmp_2_reg_1563 = ap_const_lv1_1) and (tmp_1_reg_1554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_4_we0 <= ap_const_logic_1;
        else 
            local_temp_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_temp_5_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, newIndex5_reg_1537, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_temp_5_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_5_address0 <= newIndex5_reg_1537(8 - 1 downto 0);
        else 
            local_temp_5_address0 <= "XXXXXXXX";
        end if; 
    end process;


    local_temp_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_temp_5_ce0 <= ap_const_logic_1;
        else 
            local_temp_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_temp_5_d0 <= (train_images_5_q0 xor test_image);

    local_temp_5_we0_assign_proc : process(tmp_31_reg_1533, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_1_reg_1554, tmp_2_reg_1563, tmp_3_reg_1572, tmp_4_reg_1581, tmp_5_reg_1590, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_5_reg_1590 = ap_const_lv1_1) and (tmp_4_reg_1581 = ap_const_lv1_1) and (tmp_3_reg_1572 = ap_const_lv1_1) and (tmp_2_reg_1563 = ap_const_lv1_1) and (tmp_1_reg_1554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_5_we0 <= ap_const_logic_1;
        else 
            local_temp_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_temp_6_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, newIndex5_reg_1537, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_temp_6_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_6_address0 <= newIndex5_reg_1537(8 - 1 downto 0);
        else 
            local_temp_6_address0 <= "XXXXXXXX";
        end if; 
    end process;


    local_temp_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_temp_6_ce0 <= ap_const_logic_1;
        else 
            local_temp_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_temp_6_d0 <= (train_images_6_q0 xor test_image);

    local_temp_6_we0_assign_proc : process(tmp_31_reg_1533, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_1_reg_1554, tmp_2_reg_1563, tmp_3_reg_1572, tmp_4_reg_1581, tmp_5_reg_1590, tmp_6_reg_1599, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_6_reg_1599 = ap_const_lv1_1) and (tmp_5_reg_1590 = ap_const_lv1_1) and (tmp_4_reg_1581 = ap_const_lv1_1) and (tmp_3_reg_1572 = ap_const_lv1_1) and (tmp_2_reg_1563 = ap_const_lv1_1) and (tmp_1_reg_1554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_6_we0 <= ap_const_logic_1;
        else 
            local_temp_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    local_temp_7_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, newIndex5_reg_1537, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, newIndex9_fu_1235_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            local_temp_7_address0 <= newIndex9_fu_1235_p1(8 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_7_address0 <= newIndex5_reg_1537(8 - 1 downto 0);
        else 
            local_temp_7_address0 <= "XXXXXXXX";
        end if; 
    end process;


    local_temp_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state7, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            local_temp_7_ce0 <= ap_const_logic_1;
        else 
            local_temp_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_temp_7_d0 <= (train_images_7_q0 xor test_image);

    local_temp_7_we0_assign_proc : process(tmp_31_reg_1533, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_1_reg_1554, tmp_2_reg_1563, tmp_3_reg_1572, tmp_4_reg_1581, tmp_5_reg_1590, tmp_6_reg_1599, tmp_7_reg_1608, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_7_reg_1608 = ap_const_lv1_1) and (tmp_6_reg_1599 = ap_const_lv1_1) and (tmp_5_reg_1590 = ap_const_lv1_1) and (tmp_4_reg_1581 = ap_const_lv1_1) and (tmp_3_reg_1572 = ap_const_lv1_1) and (tmp_2_reg_1563 = ap_const_lv1_1) and (tmp_1_reg_1554 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (tmp_31_reg_1533 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            local_temp_7_we0 <= ap_const_logic_1;
        else 
            local_temp_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    newIndex5_fu_1000_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_fu_990_p4),64));
    newIndex6_fu_1158_p4 <= i_reg_863(10 downto 3);
    newIndex7_fu_1168_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex6_fu_1158_p4),64));
    newIndex8_fu_1225_p4 <= x2_mid2_fu_1199_p3(10 downto 3);
    newIndex9_fu_1235_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex8_fu_1225_p4),64));
    newIndex_fu_990_p4 <= x1_reg_852(31 downto 3);
    p_cast4_fu_981_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_30_fu_973_p3),32));
    tmp_11_fu_1315_p2 <= (tmp_9_mid2_fu_1258_p2 and tmp_34_fu_1311_p1);
    tmp_12_cast_fu_1327_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_1321_p2),64));
    tmp_12_fu_1321_p2 <= std_logic_vector(shift_right(unsigned(tmp_11_fu_1315_p2),to_integer(unsigned('0' & tmp_8_cast_mid2_fu_1255_p1(31-1 downto 0)))));
    tmp_13_fu_1331_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_1327_p1) + unsigned(tmp_s_fu_1267_p10));
    tmp_1_fu_1018_p2 <= "1" when (signed(x1_1_s_fu_1012_p2) < signed(local_num_elements_cast1_reg_1517)) else "0";
    tmp_29_fu_963_p4 <= tmp_fu_957_p2(11 downto 3);
    tmp_2_fu_1029_p2 <= "1" when (signed(x1_1_1_fu_1023_p2) < signed(local_num_elements_cast1_reg_1517)) else "0";
    tmp_30_fu_973_p3 <= (tmp_29_fu_963_p4 & ap_const_lv3_0);
    tmp_31_fu_985_p2 <= "1" when (x1_reg_852 = p_cast4_reg_1528) else "0";
    tmp_32_fu_1154_p1 <= i_reg_863(3 - 1 downto 0);
    tmp_33_fu_1221_p1 <= x2_mid2_fu_1199_p3(3 - 1 downto 0);
    tmp_34_fu_1311_p1 <= tmp_26_fu_1289_p10(49 - 1 downto 0);
    tmp_3_fu_1040_p2 <= "1" when (signed(x1_1_2_fu_1034_p2) < signed(local_num_elements_cast1_reg_1517)) else "0";
    tmp_4_fu_1051_p2 <= "1" when (signed(x1_1_3_fu_1045_p2) < signed(local_num_elements_cast1_reg_1517)) else "0";
    tmp_5_fu_1062_p2 <= "1" when (signed(x1_1_4_fu_1056_p2) < signed(local_num_elements_cast1_reg_1517)) else "0";
    tmp_6_fu_1073_p2 <= "1" when (signed(x1_1_5_fu_1067_p2) < signed(local_num_elements_cast1_reg_1517)) else "0";
    tmp_7_fu_1084_p2 <= "1" when (signed(x1_1_6_fu_1078_p2) < signed(local_num_elements_cast1_reg_1517)) else "0";
    tmp_8_cast_mid2_fu_1255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_cast_mid2_v_reg_1652),49));
    tmp_8_cast_mid2_v_fu_1213_p3 <= 
        i1_reg_885 when (exitcond_fu_1194_p2(0) = '1') else 
        i_s_fu_1207_p2;
    tmp_9_mid2_fu_1258_p2 <= std_logic_vector(shift_left(unsigned(ap_const_lv49_1),to_integer(unsigned('0' & tmp_8_cast_mid2_fu_1255_p1(31-1 downto 0)))));
    tmp_fu_957_p2 <= std_logic_vector(unsigned(local_num_elements_cast1_cast_fu_953_p1) + unsigned(ap_const_lv12_7));
    train_images_0_address0 <= newIndex5_fu_1000_p1(8 - 1 downto 0);

    train_images_0_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            train_images_0_ce0 <= ap_const_logic_1;
        else 
            train_images_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    train_images_1_address0 <= newIndex5_fu_1000_p1(8 - 1 downto 0);

    train_images_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            train_images_1_ce0 <= ap_const_logic_1;
        else 
            train_images_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    train_images_2_address0 <= newIndex5_fu_1000_p1(8 - 1 downto 0);

    train_images_2_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            train_images_2_ce0 <= ap_const_logic_1;
        else 
            train_images_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    train_images_3_address0 <= newIndex5_fu_1000_p1(8 - 1 downto 0);

    train_images_3_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            train_images_3_ce0 <= ap_const_logic_1;
        else 
            train_images_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    train_images_4_address0 <= newIndex5_fu_1000_p1(8 - 1 downto 0);

    train_images_4_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            train_images_4_ce0 <= ap_const_logic_1;
        else 
            train_images_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    train_images_5_address0 <= newIndex5_fu_1000_p1(8 - 1 downto 0);

    train_images_5_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            train_images_5_ce0 <= ap_const_logic_1;
        else 
            train_images_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    train_images_6_address0 <= newIndex5_fu_1000_p1(8 - 1 downto 0);

    train_images_6_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            train_images_6_ce0 <= ap_const_logic_1;
        else 
            train_images_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    train_images_7_address0 <= newIndex5_fu_1000_p1(8 - 1 downto 0);

    train_images_7_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            train_images_7_ce0 <= ap_const_logic_1;
        else 
            train_images_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    x1_1_1_fu_1023_p2 <= (x1_reg_852 or ap_const_lv32_2);
    x1_1_2_fu_1034_p2 <= (x1_reg_852 or ap_const_lv32_3);
    x1_1_3_fu_1045_p2 <= (x1_reg_852 or ap_const_lv32_4);
    x1_1_4_fu_1056_p2 <= (x1_reg_852 or ap_const_lv32_5);
    x1_1_5_fu_1067_p2 <= (x1_reg_852 or ap_const_lv32_6);
    x1_1_6_fu_1078_p2 <= (x1_reg_852 or ap_const_lv32_7);
    x1_1_7_fu_1089_p2 <= std_logic_vector(unsigned(x1_reg_852) + unsigned(ap_const_lv32_8));
    x1_1_s_fu_1012_p2 <= (x1_reg_852 or ap_const_lv32_1);
    x2_1_fu_1337_p2 <= std_logic_vector(unsigned(x2_mid2_reg_1647) + unsigned(ap_const_lv11_1));
    x2_mid2_fu_1199_p3 <= 
        x2_reg_896 when (exitcond_fu_1194_p2(0) = '1') else 
        ap_const_lv11_0;
end behav;
