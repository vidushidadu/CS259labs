-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2_AR71275_op
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity digitrec_kernel_load_unsigned_long_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_data_dram_AWVALID : OUT STD_LOGIC;
    m_axi_data_dram_AWREADY : IN STD_LOGIC;
    m_axi_data_dram_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_data_dram_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_dram_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_dram_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_dram_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_dram_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_dram_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_dram_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_dram_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_dram_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_WVALID : OUT STD_LOGIC;
    m_axi_data_dram_WREADY : IN STD_LOGIC;
    m_axi_data_dram_WDATA : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_data_dram_WSTRB : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data_dram_WLAST : OUT STD_LOGIC;
    m_axi_data_dram_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_ARVALID : OUT STD_LOGIC;
    m_axi_data_dram_ARREADY : IN STD_LOGIC;
    m_axi_data_dram_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_data_dram_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_data_dram_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_dram_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_dram_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_dram_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_dram_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data_dram_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_dram_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data_dram_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_RVALID : IN STD_LOGIC;
    m_axi_data_dram_RREADY : OUT STD_LOGIC;
    m_axi_data_dram_RDATA : IN STD_LOGIC_VECTOR (63 downto 0);
    m_axi_data_dram_RLAST : IN STD_LOGIC;
    m_axi_data_dram_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_dram_BVALID : IN STD_LOGIC;
    m_axi_data_dram_BREADY : OUT STD_LOGIC;
    m_axi_data_dram_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data_dram_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_data_dram_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    data_dram_offset : IN STD_LOGIC_VECTOR (60 downto 0);
    data_dram_offset1 : IN STD_LOGIC_VECTOR (14 downto 0);
    data_local_0_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_local_0_ce0 : OUT STD_LOGIC;
    data_local_0_we0 : OUT STD_LOGIC;
    data_local_0_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_local_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_local_1_ce0 : OUT STD_LOGIC;
    data_local_1_we0 : OUT STD_LOGIC;
    data_local_1_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_local_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_local_2_ce0 : OUT STD_LOGIC;
    data_local_2_we0 : OUT STD_LOGIC;
    data_local_2_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_local_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_local_3_ce0 : OUT STD_LOGIC;
    data_local_3_we0 : OUT STD_LOGIC;
    data_local_3_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_local_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_local_4_ce0 : OUT STD_LOGIC;
    data_local_4_we0 : OUT STD_LOGIC;
    data_local_4_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_local_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_local_5_ce0 : OUT STD_LOGIC;
    data_local_5_we0 : OUT STD_LOGIC;
    data_local_5_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_local_6_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_local_6_ce0 : OUT STD_LOGIC;
    data_local_6_we0 : OUT STD_LOGIC;
    data_local_6_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    data_local_7_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    data_local_7_ce0 : OUT STD_LOGIC;
    data_local_7_we0 : OUT STD_LOGIC;
    data_local_7_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    num_elem : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of digitrec_kernel_load_unsigned_long_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal data_dram_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal data_dram_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_reg_225 : STD_LOGIC_VECTOR (10 downto 0);
    signal sum2_fu_244_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal sum2_reg_301 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_sig_ioackin_m_axi_data_dram_ARREADY : STD_LOGIC;
    signal exitcond_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_270_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_276_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_331 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_331_pp0_iter1_reg : STD_LOGIC_VECTOR (2 downto 0);
    signal newIndex_reg_335 : STD_LOGIC_VECTOR (7 downto 0);
    signal newIndex_reg_335_pp0_iter1_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal data_dram_addr_read_reg_340 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal newIndex8_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_250_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_reg_ioackin_m_axi_data_dram_ARREADY : STD_LOGIC := '0';
    signal data_dram_offset_cast_fu_240_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_23_cast_fu_236_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ioackin_m_axi_data_dram_ARREADY_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ioackin_m_axi_data_dram_ARREADY <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                    if ((ap_sig_ioackin_m_axi_data_dram_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_data_dram_ARREADY <= ap_const_logic_0;
                    elsif ((m_axi_data_dram_ARREADY = ap_const_logic_1)) then 
                        ap_reg_ioackin_m_axi_data_dram_ARREADY <= ap_const_logic_1;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    i_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_265_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_225 <= i_1_fu_270_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_reg_225 <= ap_const_lv11_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_dram_addr_read_reg_340 <= m_axi_data_dram_RDATA;
                newIndex_reg_335_pp0_iter1_reg <= newIndex_reg_335;
                tmp_reg_331_pp0_iter1_reg <= tmp_reg_331;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_265_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                newIndex_reg_335 <= i_reg_225(10 downto 3);
                tmp_reg_331 <= tmp_fu_276_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                sum2_reg_301 <= sum2_fu_244_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_enable_reg_pp0_iter1, ap_sig_ioackin_m_axi_data_dram_ARREADY, exitcond_fu_265_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (ap_sig_ioackin_m_axi_data_dram_ARREADY = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_265_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_265_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(m_axi_data_dram_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((m_axi_data_dram_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(m_axi_data_dram_RVALID, ap_enable_reg_pp0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((m_axi_data_dram_RVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_state10_pp0_stage0_iter1_assign_proc : process(m_axi_data_dram_RVALID)
    begin
                ap_block_state10_pp0_stage0_iter1 <= (m_axi_data_dram_RVALID = ap_const_logic_0);
    end process;

        ap_block_state11_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(exitcond_fu_265_p2)
    begin
        if ((exitcond_fu_265_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_ioackin_m_axi_data_dram_ARREADY_assign_proc : process(m_axi_data_dram_ARREADY, ap_reg_ioackin_m_axi_data_dram_ARREADY)
    begin
        if ((ap_reg_ioackin_m_axi_data_dram_ARREADY = ap_const_logic_0)) then 
            ap_sig_ioackin_m_axi_data_dram_ARREADY <= m_axi_data_dram_ARREADY;
        else 
            ap_sig_ioackin_m_axi_data_dram_ARREADY <= ap_const_logic_1;
        end if; 
    end process;


    data_dram_blk_n_AR_assign_proc : process(m_axi_data_dram_ARREADY, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_dram_blk_n_AR <= m_axi_data_dram_ARREADY;
        else 
            data_dram_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data_dram_blk_n_R_assign_proc : process(m_axi_data_dram_RVALID, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data_dram_blk_n_R <= m_axi_data_dram_RVALID;
        else 
            data_dram_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    data_dram_offset_cast_fu_240_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_dram_offset),62));
    data_local_0_address0 <= newIndex8_fu_290_p1(8 - 1 downto 0);

    data_local_0_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_0_ce0 <= ap_const_logic_1;
        else 
            data_local_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_0_d0 <= data_dram_addr_read_reg_340;

    data_local_0_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_331_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_reg_331_pp0_iter1_reg = ap_const_lv3_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_0_we0 <= ap_const_logic_1;
        else 
            data_local_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_1_address0 <= newIndex8_fu_290_p1(8 - 1 downto 0);

    data_local_1_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_1_ce0 <= ap_const_logic_1;
        else 
            data_local_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_1_d0 <= data_dram_addr_read_reg_340;

    data_local_1_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_331_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_reg_331_pp0_iter1_reg = ap_const_lv3_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_1_we0 <= ap_const_logic_1;
        else 
            data_local_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_2_address0 <= newIndex8_fu_290_p1(8 - 1 downto 0);

    data_local_2_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_2_ce0 <= ap_const_logic_1;
        else 
            data_local_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_2_d0 <= data_dram_addr_read_reg_340;

    data_local_2_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_331_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_reg_331_pp0_iter1_reg = ap_const_lv3_2) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_2_we0 <= ap_const_logic_1;
        else 
            data_local_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_3_address0 <= newIndex8_fu_290_p1(8 - 1 downto 0);

    data_local_3_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_3_ce0 <= ap_const_logic_1;
        else 
            data_local_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_3_d0 <= data_dram_addr_read_reg_340;

    data_local_3_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_331_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_reg_331_pp0_iter1_reg = ap_const_lv3_3) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_3_we0 <= ap_const_logic_1;
        else 
            data_local_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_4_address0 <= newIndex8_fu_290_p1(8 - 1 downto 0);

    data_local_4_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_4_ce0 <= ap_const_logic_1;
        else 
            data_local_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_4_d0 <= data_dram_addr_read_reg_340;

    data_local_4_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_331_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_reg_331_pp0_iter1_reg = ap_const_lv3_4) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_4_we0 <= ap_const_logic_1;
        else 
            data_local_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_5_address0 <= newIndex8_fu_290_p1(8 - 1 downto 0);

    data_local_5_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_5_ce0 <= ap_const_logic_1;
        else 
            data_local_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_5_d0 <= data_dram_addr_read_reg_340;

    data_local_5_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_331_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_reg_331_pp0_iter1_reg = ap_const_lv3_5) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_5_we0 <= ap_const_logic_1;
        else 
            data_local_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_6_address0 <= newIndex8_fu_290_p1(8 - 1 downto 0);

    data_local_6_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_6_ce0 <= ap_const_logic_1;
        else 
            data_local_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_6_d0 <= data_dram_addr_read_reg_340;

    data_local_6_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_331_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_reg_331_pp0_iter1_reg = ap_const_lv3_6) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_6_we0 <= ap_const_logic_1;
        else 
            data_local_6_we0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_7_address0 <= newIndex8_fu_290_p1(8 - 1 downto 0);

    data_local_7_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_7_ce0 <= ap_const_logic_1;
        else 
            data_local_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    data_local_7_d0 <= data_dram_addr_read_reg_340;

    data_local_7_we0_assign_proc : process(ap_block_pp0_stage0_11001, tmp_reg_331_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((tmp_reg_331_pp0_iter1_reg = ap_const_lv3_7) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data_local_7_we0 <= ap_const_logic_1;
        else 
            data_local_7_we0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_265_p2 <= "1" when (i_reg_225 = num_elem) else "0";
    i_1_fu_270_p2 <= std_logic_vector(unsigned(i_reg_225) + unsigned(ap_const_lv11_1));
    m_axi_data_dram_ARADDR <= sum2_cast_fu_250_p1;
    m_axi_data_dram_ARBURST <= ap_const_lv2_0;
    m_axi_data_dram_ARCACHE <= ap_const_lv4_0;
    m_axi_data_dram_ARID <= ap_const_lv1_0;
    m_axi_data_dram_ARLEN <= std_logic_vector(IEEE.numeric_std.resize(unsigned(num_elem),32));
    m_axi_data_dram_ARLOCK <= ap_const_lv2_0;
    m_axi_data_dram_ARPROT <= ap_const_lv3_0;
    m_axi_data_dram_ARQOS <= ap_const_lv4_0;
    m_axi_data_dram_ARREGION <= ap_const_lv4_0;
    m_axi_data_dram_ARSIZE <= ap_const_lv3_0;
    m_axi_data_dram_ARUSER <= ap_const_lv1_0;

    m_axi_data_dram_ARVALID_assign_proc : process(ap_CS_fsm_state2, ap_reg_ioackin_m_axi_data_dram_ARREADY)
    begin
        if (((ap_reg_ioackin_m_axi_data_dram_ARREADY = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            m_axi_data_dram_ARVALID <= ap_const_logic_1;
        else 
            m_axi_data_dram_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_data_dram_AWADDR <= ap_const_lv64_0;
    m_axi_data_dram_AWBURST <= ap_const_lv2_0;
    m_axi_data_dram_AWCACHE <= ap_const_lv4_0;
    m_axi_data_dram_AWID <= ap_const_lv1_0;
    m_axi_data_dram_AWLEN <= ap_const_lv32_0;
    m_axi_data_dram_AWLOCK <= ap_const_lv2_0;
    m_axi_data_dram_AWPROT <= ap_const_lv3_0;
    m_axi_data_dram_AWQOS <= ap_const_lv4_0;
    m_axi_data_dram_AWREGION <= ap_const_lv4_0;
    m_axi_data_dram_AWSIZE <= ap_const_lv3_0;
    m_axi_data_dram_AWUSER <= ap_const_lv1_0;
    m_axi_data_dram_AWVALID <= ap_const_logic_0;
    m_axi_data_dram_BREADY <= ap_const_logic_0;

    m_axi_data_dram_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_data_dram_RREADY <= ap_const_logic_1;
        else 
            m_axi_data_dram_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_data_dram_WDATA <= ap_const_lv64_0;
    m_axi_data_dram_WID <= ap_const_lv1_0;
    m_axi_data_dram_WLAST <= ap_const_logic_0;
    m_axi_data_dram_WSTRB <= ap_const_lv8_0;
    m_axi_data_dram_WUSER <= ap_const_lv1_0;
    m_axi_data_dram_WVALID <= ap_const_logic_0;
    newIndex8_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(newIndex_reg_335_pp0_iter1_reg),64));
    sum2_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_reg_301),64));
    sum2_fu_244_p2 <= std_logic_vector(unsigned(data_dram_offset_cast_fu_240_p1) + unsigned(tmp_23_cast_fu_236_p1));
    tmp_23_cast_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(data_dram_offset1),62));
    tmp_fu_276_p1 <= i_reg_225(3 - 1 downto 0);
end behav;
