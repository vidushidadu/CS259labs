// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2_AR71275_op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _digitrec_kernel_load_unsigned_char_s_HH_
#define _digitrec_kernel_load_unsigned_char_s_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct digitrec_kernel_load_unsigned_char_s : public sc_module {
    // Port declarations 57
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > p_read;
    sc_in< sc_lv<8> > p_read4;
    sc_in< sc_lv<8> > p_read8;
    sc_in< sc_lv<8> > p_read27;
    sc_out< sc_logic > m_axi_data_local_AWVALID;
    sc_in< sc_logic > m_axi_data_local_AWREADY;
    sc_out< sc_lv<64> > m_axi_data_local_AWADDR;
    sc_out< sc_lv<1> > m_axi_data_local_AWID;
    sc_out< sc_lv<32> > m_axi_data_local_AWLEN;
    sc_out< sc_lv<3> > m_axi_data_local_AWSIZE;
    sc_out< sc_lv<2> > m_axi_data_local_AWBURST;
    sc_out< sc_lv<2> > m_axi_data_local_AWLOCK;
    sc_out< sc_lv<4> > m_axi_data_local_AWCACHE;
    sc_out< sc_lv<3> > m_axi_data_local_AWPROT;
    sc_out< sc_lv<4> > m_axi_data_local_AWQOS;
    sc_out< sc_lv<4> > m_axi_data_local_AWREGION;
    sc_out< sc_lv<1> > m_axi_data_local_AWUSER;
    sc_out< sc_logic > m_axi_data_local_WVALID;
    sc_in< sc_logic > m_axi_data_local_WREADY;
    sc_out< sc_lv<8> > m_axi_data_local_WDATA;
    sc_out< sc_lv<1> > m_axi_data_local_WSTRB;
    sc_out< sc_logic > m_axi_data_local_WLAST;
    sc_out< sc_lv<1> > m_axi_data_local_WID;
    sc_out< sc_lv<1> > m_axi_data_local_WUSER;
    sc_out< sc_logic > m_axi_data_local_ARVALID;
    sc_in< sc_logic > m_axi_data_local_ARREADY;
    sc_out< sc_lv<64> > m_axi_data_local_ARADDR;
    sc_out< sc_lv<1> > m_axi_data_local_ARID;
    sc_out< sc_lv<32> > m_axi_data_local_ARLEN;
    sc_out< sc_lv<3> > m_axi_data_local_ARSIZE;
    sc_out< sc_lv<2> > m_axi_data_local_ARBURST;
    sc_out< sc_lv<2> > m_axi_data_local_ARLOCK;
    sc_out< sc_lv<4> > m_axi_data_local_ARCACHE;
    sc_out< sc_lv<3> > m_axi_data_local_ARPROT;
    sc_out< sc_lv<4> > m_axi_data_local_ARQOS;
    sc_out< sc_lv<4> > m_axi_data_local_ARREGION;
    sc_out< sc_lv<1> > m_axi_data_local_ARUSER;
    sc_in< sc_logic > m_axi_data_local_RVALID;
    sc_out< sc_logic > m_axi_data_local_RREADY;
    sc_in< sc_lv<8> > m_axi_data_local_RDATA;
    sc_in< sc_logic > m_axi_data_local_RLAST;
    sc_in< sc_lv<1> > m_axi_data_local_RID;
    sc_in< sc_lv<1> > m_axi_data_local_RUSER;
    sc_in< sc_lv<2> > m_axi_data_local_RRESP;
    sc_in< sc_logic > m_axi_data_local_BVALID;
    sc_out< sc_logic > m_axi_data_local_BREADY;
    sc_in< sc_lv<2> > m_axi_data_local_BRESP;
    sc_in< sc_lv<1> > m_axi_data_local_BID;
    sc_in< sc_lv<1> > m_axi_data_local_BUSER;
    sc_in< sc_lv<64> > data_local_offset;
    sc_in< sc_lv<5> > data_local_offset1;


    // Module declarations
    digitrec_kernel_load_unsigned_char_s(sc_module_name name);
    SC_HAS_PROCESS(digitrec_kernel_load_unsigned_char_s);

    ~digitrec_kernel_load_unsigned_char_s();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > data_local_blk_n_AW;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > data_local_blk_n_W;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<1> > exitcond_reg_200;
    sc_signal< sc_logic > data_local_blk_n_B;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<2> > i_reg_120;
    sc_signal< sc_lv<64> > data_local_addr_reg_174;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_data_local_AWREADY;
    sc_signal< sc_lv<1> > exitcond_fu_162_p2;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state4_pp0_stage0_iter1;
    sc_signal< sc_logic > ap_sig_ioackin_m_axi_data_local_WREADY;
    sc_signal< bool > ap_block_state4_io;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<2> > i_2_fu_168_p2;
    sc_signal< sc_lv<2> > i_2_reg_204;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state3;
    sc_signal< sc_lv<2> > ap_phi_mux_i_phi_fu_124_p4;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter0_data_dram_load_phi_reg_132;
    sc_signal< sc_lv<8> > ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132;
    sc_signal< sc_lv<64> > sum2_fu_150_p2;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_data_local_AWREADY;
    sc_signal< sc_logic > ap_reg_ioackin_m_axi_data_local_WREADY;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<64> > tmp_24_fu_146_p1;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_157;
    sc_signal< bool > ap_condition_276;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_pp0_stage0;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<8> ap_ST_fsm_state9;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<32> ap_const_lv32_3;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state9();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state3_pp0_stage0_iter0();
    void thread_ap_block_state4_io();
    void thread_ap_block_state4_pp0_stage0_iter1();
    void thread_ap_condition_157();
    void thread_ap_condition_276();
    void thread_ap_condition_pp0_exit_iter0_state3();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_i_phi_fu_124_p4();
    void thread_ap_phi_reg_pp0_iter0_data_dram_load_phi_reg_132();
    void thread_ap_ready();
    void thread_ap_sig_ioackin_m_axi_data_local_AWREADY();
    void thread_ap_sig_ioackin_m_axi_data_local_WREADY();
    void thread_data_local_blk_n_AW();
    void thread_data_local_blk_n_B();
    void thread_data_local_blk_n_W();
    void thread_exitcond_fu_162_p2();
    void thread_i_2_fu_168_p2();
    void thread_m_axi_data_local_ARADDR();
    void thread_m_axi_data_local_ARBURST();
    void thread_m_axi_data_local_ARCACHE();
    void thread_m_axi_data_local_ARID();
    void thread_m_axi_data_local_ARLEN();
    void thread_m_axi_data_local_ARLOCK();
    void thread_m_axi_data_local_ARPROT();
    void thread_m_axi_data_local_ARQOS();
    void thread_m_axi_data_local_ARREGION();
    void thread_m_axi_data_local_ARSIZE();
    void thread_m_axi_data_local_ARUSER();
    void thread_m_axi_data_local_ARVALID();
    void thread_m_axi_data_local_AWADDR();
    void thread_m_axi_data_local_AWBURST();
    void thread_m_axi_data_local_AWCACHE();
    void thread_m_axi_data_local_AWID();
    void thread_m_axi_data_local_AWLEN();
    void thread_m_axi_data_local_AWLOCK();
    void thread_m_axi_data_local_AWPROT();
    void thread_m_axi_data_local_AWQOS();
    void thread_m_axi_data_local_AWREGION();
    void thread_m_axi_data_local_AWSIZE();
    void thread_m_axi_data_local_AWUSER();
    void thread_m_axi_data_local_AWVALID();
    void thread_m_axi_data_local_BREADY();
    void thread_m_axi_data_local_RREADY();
    void thread_m_axi_data_local_WDATA();
    void thread_m_axi_data_local_WID();
    void thread_m_axi_data_local_WLAST();
    void thread_m_axi_data_local_WSTRB();
    void thread_m_axi_data_local_WUSER();
    void thread_m_axi_data_local_WVALID();
    void thread_sum2_fu_150_p2();
    void thread_tmp_24_fu_146_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
