// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2_AR71275_op
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "digitrec_kernel_load_unsigned_char_s.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic digitrec_kernel_load_unsigned_char_s::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic digitrec_kernel_load_unsigned_char_s::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<8> digitrec_kernel_load_unsigned_char_s::ap_ST_fsm_state1 = "1";
const sc_lv<8> digitrec_kernel_load_unsigned_char_s::ap_ST_fsm_state2 = "10";
const sc_lv<8> digitrec_kernel_load_unsigned_char_s::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<8> digitrec_kernel_load_unsigned_char_s::ap_ST_fsm_state5 = "1000";
const sc_lv<8> digitrec_kernel_load_unsigned_char_s::ap_ST_fsm_state6 = "10000";
const sc_lv<8> digitrec_kernel_load_unsigned_char_s::ap_ST_fsm_state7 = "100000";
const sc_lv<8> digitrec_kernel_load_unsigned_char_s::ap_ST_fsm_state8 = "1000000";
const sc_lv<8> digitrec_kernel_load_unsigned_char_s::ap_ST_fsm_state9 = "10000000";
const bool digitrec_kernel_load_unsigned_char_s::ap_const_boolean_1 = true;
const sc_lv<32> digitrec_kernel_load_unsigned_char_s::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<64> digitrec_kernel_load_unsigned_char_s::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<1> digitrec_kernel_load_unsigned_char_s::ap_const_lv1_0 = "0";
const sc_lv<3> digitrec_kernel_load_unsigned_char_s::ap_const_lv3_0 = "000";
const sc_lv<2> digitrec_kernel_load_unsigned_char_s::ap_const_lv2_0 = "00";
const sc_lv<4> digitrec_kernel_load_unsigned_char_s::ap_const_lv4_0 = "0000";
const sc_lv<32> digitrec_kernel_load_unsigned_char_s::ap_const_lv32_1 = "1";
const sc_lv<32> digitrec_kernel_load_unsigned_char_s::ap_const_lv32_2 = "10";
const bool digitrec_kernel_load_unsigned_char_s::ap_const_boolean_0 = false;
const sc_lv<32> digitrec_kernel_load_unsigned_char_s::ap_const_lv32_7 = "111";
const sc_lv<1> digitrec_kernel_load_unsigned_char_s::ap_const_lv1_1 = "1";
const sc_lv<2> digitrec_kernel_load_unsigned_char_s::ap_const_lv2_1 = "1";
const sc_lv<2> digitrec_kernel_load_unsigned_char_s::ap_const_lv2_2 = "10";
const sc_lv<2> digitrec_kernel_load_unsigned_char_s::ap_const_lv2_3 = "11";
const sc_lv<32> digitrec_kernel_load_unsigned_char_s::ap_const_lv32_3 = "11";

digitrec_kernel_load_unsigned_char_s::digitrec_kernel_load_unsigned_char_s(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_state4_io );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_io);
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_sig_ioackin_m_axi_data_local_WREADY );

    SC_METHOD(thread_ap_block_state4_pp0_stage0_iter1);

    SC_METHOD(thread_ap_condition_157);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_condition_276);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_fu_162_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_local_BVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_i_phi_fu_124_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( i_reg_120 );
    sensitive << ( i_2_reg_204 );

    SC_METHOD(thread_ap_phi_reg_pp0_iter0_data_dram_load_phi_reg_132);

    SC_METHOD(thread_ap_ready);
    sensitive << ( m_axi_data_local_BVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_data_local_AWREADY);
    sensitive << ( m_axi_data_local_AWREADY );
    sensitive << ( ap_reg_ioackin_m_axi_data_local_AWREADY );

    SC_METHOD(thread_ap_sig_ioackin_m_axi_data_local_WREADY);
    sensitive << ( m_axi_data_local_WREADY );
    sensitive << ( ap_reg_ioackin_m_axi_data_local_WREADY );

    SC_METHOD(thread_data_local_blk_n_AW);
    sensitive << ( m_axi_data_local_AWREADY );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_data_local_blk_n_B);
    sensitive << ( m_axi_data_local_BVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_data_local_blk_n_W);
    sensitive << ( m_axi_data_local_WREADY );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_reg_200 );

    SC_METHOD(thread_exitcond_fu_162_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_phi_mux_i_phi_fu_124_p4 );

    SC_METHOD(thread_i_2_fu_168_p2);
    sensitive << ( ap_phi_mux_i_phi_fu_124_p4 );

    SC_METHOD(thread_m_axi_data_local_ARADDR);

    SC_METHOD(thread_m_axi_data_local_ARBURST);

    SC_METHOD(thread_m_axi_data_local_ARCACHE);

    SC_METHOD(thread_m_axi_data_local_ARID);

    SC_METHOD(thread_m_axi_data_local_ARLEN);

    SC_METHOD(thread_m_axi_data_local_ARLOCK);

    SC_METHOD(thread_m_axi_data_local_ARPROT);

    SC_METHOD(thread_m_axi_data_local_ARQOS);

    SC_METHOD(thread_m_axi_data_local_ARREGION);

    SC_METHOD(thread_m_axi_data_local_ARSIZE);

    SC_METHOD(thread_m_axi_data_local_ARUSER);

    SC_METHOD(thread_m_axi_data_local_ARVALID);

    SC_METHOD(thread_m_axi_data_local_AWADDR);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( data_local_addr_reg_174 );
    sensitive << ( ap_reg_ioackin_m_axi_data_local_AWREADY );

    SC_METHOD(thread_m_axi_data_local_AWBURST);

    SC_METHOD(thread_m_axi_data_local_AWCACHE);

    SC_METHOD(thread_m_axi_data_local_AWID);

    SC_METHOD(thread_m_axi_data_local_AWLEN);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_data_local_AWREADY );

    SC_METHOD(thread_m_axi_data_local_AWLOCK);

    SC_METHOD(thread_m_axi_data_local_AWPROT);

    SC_METHOD(thread_m_axi_data_local_AWQOS);

    SC_METHOD(thread_m_axi_data_local_AWREGION);

    SC_METHOD(thread_m_axi_data_local_AWSIZE);

    SC_METHOD(thread_m_axi_data_local_AWUSER);

    SC_METHOD(thread_m_axi_data_local_AWVALID);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_reg_ioackin_m_axi_data_local_AWREADY );

    SC_METHOD(thread_m_axi_data_local_BREADY);
    sensitive << ( m_axi_data_local_BVALID );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_m_axi_data_local_RREADY);

    SC_METHOD(thread_m_axi_data_local_WDATA);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132 );
    sensitive << ( ap_reg_ioackin_m_axi_data_local_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_data_local_WID);

    SC_METHOD(thread_m_axi_data_local_WLAST);

    SC_METHOD(thread_m_axi_data_local_WSTRB);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_reg_ioackin_m_axi_data_local_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_m_axi_data_local_WUSER);

    SC_METHOD(thread_m_axi_data_local_WVALID);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_reg_200 );
    sensitive << ( ap_reg_ioackin_m_axi_data_local_WREADY );
    sensitive << ( ap_block_pp0_stage0_01001 );

    SC_METHOD(thread_sum2_fu_150_p2);
    sensitive << ( data_local_offset );
    sensitive << ( tmp_24_fu_146_p1 );

    SC_METHOD(thread_tmp_24_fu_146_p1);
    sensitive << ( data_local_offset1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( m_axi_data_local_BVALID );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_sig_ioackin_m_axi_data_local_AWREADY );
    sensitive << ( exitcond_fu_162_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_subdone );

    ap_CS_fsm = "00000001";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_data_local_AWREADY = SC_LOGIC_0;
    ap_reg_ioackin_m_axi_data_local_WREADY = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "digitrec_kernel_load_unsigned_char_s_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read4, "(port)p_read4");
    sc_trace(mVcdFile, p_read8, "(port)p_read8");
    sc_trace(mVcdFile, p_read27, "(port)p_read27");
    sc_trace(mVcdFile, m_axi_data_local_AWVALID, "(port)m_axi_data_local_AWVALID");
    sc_trace(mVcdFile, m_axi_data_local_AWREADY, "(port)m_axi_data_local_AWREADY");
    sc_trace(mVcdFile, m_axi_data_local_AWADDR, "(port)m_axi_data_local_AWADDR");
    sc_trace(mVcdFile, m_axi_data_local_AWID, "(port)m_axi_data_local_AWID");
    sc_trace(mVcdFile, m_axi_data_local_AWLEN, "(port)m_axi_data_local_AWLEN");
    sc_trace(mVcdFile, m_axi_data_local_AWSIZE, "(port)m_axi_data_local_AWSIZE");
    sc_trace(mVcdFile, m_axi_data_local_AWBURST, "(port)m_axi_data_local_AWBURST");
    sc_trace(mVcdFile, m_axi_data_local_AWLOCK, "(port)m_axi_data_local_AWLOCK");
    sc_trace(mVcdFile, m_axi_data_local_AWCACHE, "(port)m_axi_data_local_AWCACHE");
    sc_trace(mVcdFile, m_axi_data_local_AWPROT, "(port)m_axi_data_local_AWPROT");
    sc_trace(mVcdFile, m_axi_data_local_AWQOS, "(port)m_axi_data_local_AWQOS");
    sc_trace(mVcdFile, m_axi_data_local_AWREGION, "(port)m_axi_data_local_AWREGION");
    sc_trace(mVcdFile, m_axi_data_local_AWUSER, "(port)m_axi_data_local_AWUSER");
    sc_trace(mVcdFile, m_axi_data_local_WVALID, "(port)m_axi_data_local_WVALID");
    sc_trace(mVcdFile, m_axi_data_local_WREADY, "(port)m_axi_data_local_WREADY");
    sc_trace(mVcdFile, m_axi_data_local_WDATA, "(port)m_axi_data_local_WDATA");
    sc_trace(mVcdFile, m_axi_data_local_WSTRB, "(port)m_axi_data_local_WSTRB");
    sc_trace(mVcdFile, m_axi_data_local_WLAST, "(port)m_axi_data_local_WLAST");
    sc_trace(mVcdFile, m_axi_data_local_WID, "(port)m_axi_data_local_WID");
    sc_trace(mVcdFile, m_axi_data_local_WUSER, "(port)m_axi_data_local_WUSER");
    sc_trace(mVcdFile, m_axi_data_local_ARVALID, "(port)m_axi_data_local_ARVALID");
    sc_trace(mVcdFile, m_axi_data_local_ARREADY, "(port)m_axi_data_local_ARREADY");
    sc_trace(mVcdFile, m_axi_data_local_ARADDR, "(port)m_axi_data_local_ARADDR");
    sc_trace(mVcdFile, m_axi_data_local_ARID, "(port)m_axi_data_local_ARID");
    sc_trace(mVcdFile, m_axi_data_local_ARLEN, "(port)m_axi_data_local_ARLEN");
    sc_trace(mVcdFile, m_axi_data_local_ARSIZE, "(port)m_axi_data_local_ARSIZE");
    sc_trace(mVcdFile, m_axi_data_local_ARBURST, "(port)m_axi_data_local_ARBURST");
    sc_trace(mVcdFile, m_axi_data_local_ARLOCK, "(port)m_axi_data_local_ARLOCK");
    sc_trace(mVcdFile, m_axi_data_local_ARCACHE, "(port)m_axi_data_local_ARCACHE");
    sc_trace(mVcdFile, m_axi_data_local_ARPROT, "(port)m_axi_data_local_ARPROT");
    sc_trace(mVcdFile, m_axi_data_local_ARQOS, "(port)m_axi_data_local_ARQOS");
    sc_trace(mVcdFile, m_axi_data_local_ARREGION, "(port)m_axi_data_local_ARREGION");
    sc_trace(mVcdFile, m_axi_data_local_ARUSER, "(port)m_axi_data_local_ARUSER");
    sc_trace(mVcdFile, m_axi_data_local_RVALID, "(port)m_axi_data_local_RVALID");
    sc_trace(mVcdFile, m_axi_data_local_RREADY, "(port)m_axi_data_local_RREADY");
    sc_trace(mVcdFile, m_axi_data_local_RDATA, "(port)m_axi_data_local_RDATA");
    sc_trace(mVcdFile, m_axi_data_local_RLAST, "(port)m_axi_data_local_RLAST");
    sc_trace(mVcdFile, m_axi_data_local_RID, "(port)m_axi_data_local_RID");
    sc_trace(mVcdFile, m_axi_data_local_RUSER, "(port)m_axi_data_local_RUSER");
    sc_trace(mVcdFile, m_axi_data_local_RRESP, "(port)m_axi_data_local_RRESP");
    sc_trace(mVcdFile, m_axi_data_local_BVALID, "(port)m_axi_data_local_BVALID");
    sc_trace(mVcdFile, m_axi_data_local_BREADY, "(port)m_axi_data_local_BREADY");
    sc_trace(mVcdFile, m_axi_data_local_BRESP, "(port)m_axi_data_local_BRESP");
    sc_trace(mVcdFile, m_axi_data_local_BID, "(port)m_axi_data_local_BID");
    sc_trace(mVcdFile, m_axi_data_local_BUSER, "(port)m_axi_data_local_BUSER");
    sc_trace(mVcdFile, data_local_offset, "(port)data_local_offset");
    sc_trace(mVcdFile, data_local_offset1, "(port)data_local_offset1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, data_local_blk_n_AW, "data_local_blk_n_AW");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, data_local_blk_n_W, "data_local_blk_n_W");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_reg_200, "exitcond_reg_200");
    sc_trace(mVcdFile, data_local_blk_n_B, "data_local_blk_n_B");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, i_reg_120, "i_reg_120");
    sc_trace(mVcdFile, data_local_addr_reg_174, "data_local_addr_reg_174");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_data_local_AWREADY, "ap_sig_ioackin_m_axi_data_local_AWREADY");
    sc_trace(mVcdFile, exitcond_fu_162_p2, "exitcond_fu_162_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage0_iter1, "ap_block_state4_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_sig_ioackin_m_axi_data_local_WREADY, "ap_sig_ioackin_m_axi_data_local_WREADY");
    sc_trace(mVcdFile, ap_block_state4_io, "ap_block_state4_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, i_2_fu_168_p2, "i_2_fu_168_p2");
    sc_trace(mVcdFile, i_2_reg_204, "i_2_reg_204");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_phi_mux_i_phi_fu_124_p4, "ap_phi_mux_i_phi_fu_124_p4");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter0_data_dram_load_phi_reg_132, "ap_phi_reg_pp0_iter0_data_dram_load_phi_reg_132");
    sc_trace(mVcdFile, ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132, "ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132");
    sc_trace(mVcdFile, sum2_fu_150_p2, "sum2_fu_150_p2");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_data_local_AWREADY, "ap_reg_ioackin_m_axi_data_local_AWREADY");
    sc_trace(mVcdFile, ap_reg_ioackin_m_axi_data_local_WREADY, "ap_reg_ioackin_m_axi_data_local_WREADY");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, tmp_24_fu_146_p1, "tmp_24_fu_146_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, ap_condition_157, "ap_condition_157");
    sc_trace(mVcdFile, ap_condition_276, "ap_condition_276");
#endif

    }
}

digitrec_kernel_load_unsigned_char_s::~digitrec_kernel_load_unsigned_char_s() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void digitrec_kernel_load_unsigned_char_s::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_data_local_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state3.read() ^ ap_const_logic_1);
        } else if (esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read())) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_data_local_AWREADY.read(), ap_const_logic_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_condition_157.read(), ap_const_boolean_1)) {
        if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_162_p2.read()) && 
             esl_seteq<1,2,2>(ap_const_lv2_0, ap_phi_mux_i_phi_fu_124_p4.read()))) {
            ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132 = p_read.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_162_p2.read()) && 
                    esl_seteq<1,2,2>(ap_phi_mux_i_phi_fu_124_p4.read(), ap_const_lv2_3))) {
            ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132 = p_read27.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_162_p2.read()) && 
                    esl_seteq<1,2,2>(ap_phi_mux_i_phi_fu_124_p4.read(), ap_const_lv2_2))) {
            ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132 = p_read8.read();
        } else if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_162_p2.read()) && 
                    esl_seteq<1,2,2>(ap_phi_mux_i_phi_fu_124_p4.read(), ap_const_lv2_1))) {
            ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132 = p_read4.read();
        } else if (esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1)) {
            ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132 = ap_phi_reg_pp0_iter0_data_dram_load_phi_reg_132.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_data_local_AWREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            if (esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_data_local_AWREADY.read(), ap_const_logic_1)) {
                ap_reg_ioackin_m_axi_data_local_AWREADY = ap_const_logic_0;
            } else if (esl_seteq<1,1,1>(ap_const_logic_1, m_axi_data_local_AWREADY.read())) {
                ap_reg_ioackin_m_axi_data_local_AWREADY = ap_const_logic_1;
            }
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_ioackin_m_axi_data_local_WREADY = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_condition_276.read(), ap_const_boolean_1)) {
            if (esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)) {
                ap_reg_ioackin_m_axi_data_local_WREADY = ap_const_logic_0;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, m_axi_data_local_WREADY.read()) && 
                        esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0))) {
                ap_reg_ioackin_m_axi_data_local_WREADY = ap_const_logic_1;
            }
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_200.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_reg_120 = i_2_reg_204.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_data_local_AWREADY.read(), ap_const_logic_1))) {
        i_reg_120 = ap_const_lv2_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        data_local_addr_reg_174 = sum2_fu_150_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_reg_200 = exitcond_fu_162_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1))) {
        i_2_reg_204 = i_2_fu_168_p2.read();
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[7];
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()));
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state4_io.read()));
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_block_state4_io() {
    ap_block_state4_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_200.read()) && esl_seteq<1,1,1>(ap_const_logic_0, ap_sig_ioackin_m_axi_data_local_WREADY.read()));
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_block_state4_pp0_stage0_iter1() {
    ap_block_state4_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_condition_157() {
    ap_condition_157 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1));
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_condition_276() {
    ap_condition_276 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_200.read()));
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(exitcond_fu_162_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(m_axi_data_local_BVALID.read(), ap_const_logic_1) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_phi_mux_i_phi_fu_124_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_200.read()))) {
        ap_phi_mux_i_phi_fu_124_p4 = i_2_reg_204.read();
    } else {
        ap_phi_mux_i_phi_fu_124_p4 = i_reg_120.read();
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_phi_reg_pp0_iter0_data_dram_load_phi_reg_132() {
    ap_phi_reg_pp0_iter0_data_dram_load_phi_reg_132 = "XXXXXXXX";
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(m_axi_data_local_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_sig_ioackin_m_axi_data_local_AWREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_data_local_AWREADY.read())) {
        ap_sig_ioackin_m_axi_data_local_AWREADY = m_axi_data_local_AWREADY.read();
    } else {
        ap_sig_ioackin_m_axi_data_local_AWREADY = ap_const_logic_1;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_sig_ioackin_m_axi_data_local_WREADY() {
    if (esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_data_local_WREADY.read())) {
        ap_sig_ioackin_m_axi_data_local_WREADY = m_axi_data_local_WREADY.read();
    } else {
        ap_sig_ioackin_m_axi_data_local_WREADY = ap_const_logic_1;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_data_local_blk_n_AW() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        data_local_blk_n_AW = m_axi_data_local_AWREADY.read();
    } else {
        data_local_blk_n_AW = ap_const_logic_1;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_data_local_blk_n_B() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        data_local_blk_n_B = m_axi_data_local_BVALID.read();
    } else {
        data_local_blk_n_B = ap_const_logic_1;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_data_local_blk_n_W() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_200.read()))) {
        data_local_blk_n_W = m_axi_data_local_WREADY.read();
    } else {
        data_local_blk_n_W = ap_const_logic_1;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_exitcond_fu_162_p2() {
    exitcond_fu_162_p2 = (!ap_phi_mux_i_phi_fu_124_p4.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_phi_fu_124_p4.read() == ap_const_lv2_3);
}

void digitrec_kernel_load_unsigned_char_s::thread_i_2_fu_168_p2() {
    i_2_fu_168_p2 = (!ap_phi_mux_i_phi_fu_124_p4.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(ap_phi_mux_i_phi_fu_124_p4.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARADDR() {
    m_axi_data_local_ARADDR = ap_const_lv64_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARBURST() {
    m_axi_data_local_ARBURST = ap_const_lv2_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARCACHE() {
    m_axi_data_local_ARCACHE = ap_const_lv4_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARID() {
    m_axi_data_local_ARID = ap_const_lv1_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARLEN() {
    m_axi_data_local_ARLEN = ap_const_lv32_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARLOCK() {
    m_axi_data_local_ARLOCK = ap_const_lv2_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARPROT() {
    m_axi_data_local_ARPROT = ap_const_lv3_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARQOS() {
    m_axi_data_local_ARQOS = ap_const_lv4_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARREGION() {
    m_axi_data_local_ARREGION = ap_const_lv4_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARSIZE() {
    m_axi_data_local_ARSIZE = ap_const_lv3_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARUSER() {
    m_axi_data_local_ARUSER = ap_const_lv1_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_ARVALID() {
    m_axi_data_local_ARVALID = ap_const_logic_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWADDR() {
    m_axi_data_local_AWADDR = data_local_addr_reg_174.read();
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWBURST() {
    m_axi_data_local_AWBURST = ap_const_lv2_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWCACHE() {
    m_axi_data_local_AWCACHE = ap_const_lv4_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWID() {
    m_axi_data_local_AWID = ap_const_lv1_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWLEN() {
    m_axi_data_local_AWLEN = ap_const_lv32_3;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWLOCK() {
    m_axi_data_local_AWLOCK = ap_const_lv2_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWPROT() {
    m_axi_data_local_AWPROT = ap_const_lv3_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWQOS() {
    m_axi_data_local_AWQOS = ap_const_lv4_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWREGION() {
    m_axi_data_local_AWREGION = ap_const_lv4_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWSIZE() {
    m_axi_data_local_AWSIZE = ap_const_lv3_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWUSER() {
    m_axi_data_local_AWUSER = ap_const_lv1_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_AWVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_data_local_AWREADY.read()))) {
        m_axi_data_local_AWVALID = ap_const_logic_1;
    } else {
        m_axi_data_local_AWVALID = ap_const_logic_0;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_BREADY() {
    if ((esl_seteq<1,1,1>(m_axi_data_local_BVALID.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        m_axi_data_local_BREADY = ap_const_logic_1;
    } else {
        m_axi_data_local_BREADY = ap_const_logic_0;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_RREADY() {
    m_axi_data_local_RREADY = ap_const_logic_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_WDATA() {
    m_axi_data_local_WDATA = ap_phi_reg_pp0_iter1_data_dram_load_phi_reg_132.read();
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_WID() {
    m_axi_data_local_WID = ap_const_lv1_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_WLAST() {
    m_axi_data_local_WLAST = ap_const_logic_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_WSTRB() {
    m_axi_data_local_WSTRB = ap_const_lv1_1;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_WUSER() {
    m_axi_data_local_WUSER = ap_const_lv1_0;
}

void digitrec_kernel_load_unsigned_char_s::thread_m_axi_data_local_WVALID() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_200.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_01001.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_reg_ioackin_m_axi_data_local_WREADY.read()))) {
        m_axi_data_local_WVALID = ap_const_logic_1;
    } else {
        m_axi_data_local_WVALID = ap_const_logic_0;
    }
}

void digitrec_kernel_load_unsigned_char_s::thread_sum2_fu_150_p2() {
    sum2_fu_150_p2 = (!tmp_24_fu_146_p1.read().is_01() || !data_local_offset.read().is_01())? sc_lv<64>(): (sc_biguint<64>(tmp_24_fu_146_p1.read()) + sc_biguint<64>(data_local_offset.read()));
}

void digitrec_kernel_load_unsigned_char_s::thread_tmp_24_fu_146_p1() {
    tmp_24_fu_146_p1 = esl_zext<64,5>(data_local_offset1.read());
}

void digitrec_kernel_load_unsigned_char_s::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_sig_ioackin_m_axi_data_local_AWREADY.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if (!(esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(exitcond_fu_162_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else if ((esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_boolean_0, ap_block_pp0_stage0_subdone.read()) && esl_seteq<1,1,1>(exitcond_fu_162_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(m_axi_data_local_BVALID.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXXX";
            break;
    }
}

}

